/*

MM/DD/YYYY (developer) - Description
------------------------------------
11/05/2012 (htu) - initial draft
03/16/2013 (grp) - updated during PhUSE 2013
03/18/2014 (grp) - 
  1. added ./released, ./builds, and changed valid to qual during PhUSE 2014
  2. updated the name convention
05/09/2014 (htu) - update the examples 
02/18/2016 (htu) - added updated script and data folder structure
04/04/2016 (htu) - added language level based on the actual scripts

*/

; Folder structure
We need to establish a folder structure so that we can organize the files 
(scripts, metadata files, documents and data sets) in a meaningful way. 
Here is the result of the discussion from the P03 - RGI: Repository 
governance and infrastructure:  
http://www.phusewiki.org/wiki/index.php?title=SS_P03_31AUG2015. 

We've reached a consensus on the folder structure within github. Here's an example:
; for scripts
root
- contributed
- - SAS
- - R
- development
- - SAS
- - R
- tested
- - SAS
- - - SpecDocs
- - - ZZ_Utilities
- - - Templates
- - - macros
- - - AE
- - - - output
- - - - logs
- - - - data
- - - DM
- - - etc...
- - R
- - PLSQL
- qualified
- - SAS
- - - AE
- - - MedDRA
- - - - meddra document 1.txt
- - - - example1.sas
- - - - example1.yml
- - - DM
- - R

; for data sets
root
- data
- - sdtm
- - - set1
- - - - ae.xpt
- - - - readme.txt
- - - set2
- - adam
- - - set1
- - - - adae.xpt
- - - set2

; The initial folder structure proposal for scripts proposed in 2012
./trunk/{type}/{lang}/{cat}/{prg|sub-cat}/
where 
  {type}     - folder type: docs|lang|etc
  {lang}     - language folder: SAS|R|plsql|SPSS|JAVA|C|perl|etc
  {cat}      - script category: report|graph|released|...
  {prg}      - program name or sub-category; for large program with multiple source files, 
               it can have the following sub-folders:
    ./baks   - backups of milestone versions
    ./released - final milestones
    ./builds - testing for packing the scripts
    ./data   - sample or testing data
    ./docs   - stores the documents for the requirements, proposed solutions, etc. 
    ./src    - stores the source programs and scripts
    ./result - expected output result 
    ./qual   - qualification process and steps

Here is an example of the folder structure:
trunk
  ./docs - documnets for describing a procedure, report, program or anything related to 
           the repository.
  ./lang - languages such as SAS, R, PL/SQL, etc
      ./SAS
      ./R
      ./plsql
      ./SPSS
      ./JAVA
      ./C
      ./perl
      ./etc
  ./etc
