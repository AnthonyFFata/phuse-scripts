NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA.
NOTE: SAS (r) Proprietary Software 9.4 (TS1M2)
      Licensed to F. HOFFMANN LA ROCHE AG, Site 50701490.
NOTE: This session is executing on the X64_7PRO  platform.



NOTE: Updated analytical products:

      SAS/STAT 13.2
      SAS/ETS 13.2
      SAS/IML 13.2
      SAS/QC 13.2

NOTE: Additional host information:

 X64_7PRO WIN 6.1.7601 Service Pack 1 Workstation

NOTE: SAS initialization used:
      real time           19.56 seconds
      cpu time            2.97 seconds

1          OPTIONS sasautos=(%sysfunc(getoption(sasautos))
1  ! "C:\CSS\phuse-scripts\whitepapers\utilities");

2    %util_access_test_data(advs, local=C:\CSS\phuse-scripts\data\adam\cdisc\)
NOTE: Libref SOURCE was successfully assigned as follows:
      Engine:        XPORT
      Physical Name: C:\CSS\phuse-scripts\data\adam\cdisc\advs.xpt

NOTE: There were 32139 observations read from the data set SOURCE.ADVS.
NOTE: The data set WORK.ADVS has 32139 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.24 seconds
      cpu time            0.23 seconds


NOTE: Fileref SOURCE has been deassigned.
NOTE: Libref SOURCE has been deassigned.

3
4        /*** 2b) USER SUBSET of data, to limit number of box plot outputs, and to shorten Tx
4  ! labels ***/
5
6          data advs_sub;
7            set work.advs;
8            where (paramcd in ('DIABP') and atptn in (815)) or
9                  (paramcd in ('SYSBP') and atptn in (816));
10
11           attrib trtp_short length=$6 label='Planned Treatment, abbreviated';
12
13           select (trtp);
14             when ('Placebo')              trtp_short = 'P';
15             when ('Xanomeline High Dose') trtp_short = 'X-high';
16             when ('Xanomeline Low Dose')  trtp_short = 'X-low';
17             otherwise                     trtp_short = 'UNEXPECTED';
18           end;
19         run;

NOTE: There were 5925 observations read from the data set WORK.ADVS.
      WHERE ((paramcd='DIABP') and (atptn=815)) or ((paramcd='SYSBP') and (atptn=816));
NOTE: The data set WORK.ADVS_SUB has 5925 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds


20
21
22       %*--- 3) Key user settings ---*;
23
24         %let m_lb   = work;
25         %let m_ds   = advs_sub;
26
27         %let t_var  = trtp_short;
28         %let tn_var = trtpn;
29         %let c_var  = chg;
30
31         %let b_var  = base;
32         %let ref_trtn = 0;
33
34         %let b_visn = 0;
35         %let e_visn = 99;
36
37         %let p_fl = saffl;
38         %let a_fl = anl01fl;
39
40         %let max_boxes_per_page = 20;
41
42         %let outputs_folder = C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas;
43
44     /*** end USER PROCESSING AND SETTINGS ***********************************
45      *** RELAX.                                                           ***
46      *** The rest should simply work, or alert you to invalid conditions. ***
47      ************************************************************************
48     ***/
49
50
51
52     /*** SETUP & CHECK DEPENDENCIES
53       Explain to user in case environment or data do not support this analysis
54
55       Keep just those variables and records required for this analysis
56       For details, see specifications at top
57     ***/
58
59       options nocenter mautosource mrecall mprint msglevel=I mergenoby=WARN ls=max ps=max;
60
61       %let ana_variables = STUDYID USUBJID &p_fl &a_fl &t_var &tn_var PARAM PARAMCD &c_var &b_var AVISIT AVISITN ATPT ATPTN;
62
63       %*--- Global boolean symbol CONTINUE, used with macro assert_continue(), warns user of invalid environment. Processing should HALT. ---*;
64         %let CONTINUE = %assert_depend(OS=%str(AIX,WIN,HP IPF),
65                                        SASV=9.4M2,
66                                        SYSPROD=,
67                                        vars=%str(&m_lb..&m_ds : &ana_variables),
68                                        macros=assert_continue util_labels_from_var util_count_unique_values
69                                               util_proc_template util_get_var_min_max util_value_format
70                                               util_boxplot_visit_ranges util_axis_order util_delete_dsets,
71                                        symbols=m_lb m_ds t_var tn_var c_var b_var ref_trtn b_visn e_visn p_fl a_fl
72                                                max_boxes_per_page outputs_folder
73                                       );
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. STUDYID is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. USUBJID is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. SAFFL is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANL01FL is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTP_SHORT is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAM is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. BASE is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISIT is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPT is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro ASSERT_CONTINUE in "C:\CSS\phuse-scripts\whitepapers\utilities\assert_continue.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_LABELS_FROM_VAR in "C:\CSS\phuse-scripts\whitepapers\utilities\util_labels_from_var.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_COUNT_UNIQUE_VALUES in "C:\CSS\phuse-scripts\whitepapers\utilities\util_count_unique_values.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_PROC_TEMPLATE in "C:\CSS\phuse-scripts\whitepapers\utilities\util_proc_template.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_GET_VAR_MIN_MAX in "C:\CSS\phuse-scripts\whitepapers\utilities\util_get_var_min_max.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_VALUE_FORMAT in "C:\CSS\phuse-scripts\whitepapers\utilities\util_value_format.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_BOXPLOT_VISIT_RANGES in "C:\CSS\phuse-scripts\whitepapers\utilities\util_boxplot_visit_ranges.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_AXIS_ORDER in "C:\CSS\phuse-scripts\whitepapers\utilities\util_axis_order.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_DELETE_DSETS in "C:\CSS\phuse-scripts\whitepapers\utilities\util_delete_dsets.sas".
NOTE: (ASSERT_DEPEND) PASS, found mac var M_LB with value "work"
NOTE: (ASSERT_DEPEND) PASS, found mac var M_DS with value "advs_sub"
NOTE: (ASSERT_DEPEND) PASS, found mac var T_VAR with value "trtp_short"
NOTE: (ASSERT_DEPEND) PASS, found mac var TN_VAR with value "trtpn"
NOTE: (ASSERT_DEPEND) PASS, found mac var C_VAR with value "chg"
NOTE: (ASSERT_DEPEND) PASS, found mac var B_VAR with value "base"
NOTE: (ASSERT_DEPEND) PASS, found mac var REF_TRTN with value "0"
NOTE: (ASSERT_DEPEND) PASS, found mac var B_VISN with value "0"
NOTE: (ASSERT_DEPEND) PASS, found mac var E_VISN with value "99"
NOTE: (ASSERT_DEPEND) PASS, found mac var P_FL with value "saffl"
NOTE: (ASSERT_DEPEND) PASS, found mac var A_FL with value "anl01fl"
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "20"
NOTE: (ASSERT_DEPEND) PASS, found mac var OUTPUTS_FOLDER with value "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas"
NOTE: (ASSERT_DEPEND) Result is PASS.
74
75         %assert_continue(After asserting the dependencies of this script)
NOTE: (ASSERT_CONTINUE) After asserting the dependencies of this script. OK to continue.
76
77
78       *--- Restrict analysis to SAFETY POP and ANALYSIS RECORDS (&a_fl) ---*;
79         data css_anadata;
80           set &m_lb..&m_ds (keep=&ana_variables);
81           where &p_fl = 'Y' and &a_fl = 'Y';
82
83           *--- DO NOT display the baseline change, which is always zero ---*;
84             where also avisitn ne &b_visn;
NOTE: WHERE clause has been augmented.
85         run;

NOTE: There were 3548 observations read from the data set WORK.ADVS_SUB.
      WHERE (saffl='Y') and (avisitn not = 0) and (anl01fl='Y');
NOTE: The data set WORK.CSS_ANADATA has 3548 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


86
87
88     /*** GATHER INFO for data-driven processing
89       Collect required information about these measurements:
90
91       Number, Names and Labels of PARAMCDs - used to cycle through parameters that have measurements
92         &PARAMCD_N count of parameters
93         &PARAMCD_VAL1 to &&&PARAMCD_VAL&PARAMCD_N series of parameter codes
94         &PARAMCD_LAB1 to &&&PARAMCD_LAB&PARAMCD_N series of parameter labels
95
96       Number of treatments - used for handling treatments categories
97         &TRTN
98
99       Baseline visit value & label
100        &b_visn_val1
101        &b_visn_lab1
102
103      Endpoint visit value & label
104        &e_visn_val1
105        &e_visn_lab1
106
107    ***/
108
109      %*--- Parameters: Number (&PARAMCD_N), Names (&PARAMCD_VAL1 ...) and Labels (&PARAMCD_LAB1 ...) ---*;
110        %util_labels_from_var(css_anadata, paramcd, param)
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAM is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set CSS_ANADATA.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(paramcd)) into: paramcd_n from css_anadata ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol PARAMCD_N = 2
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_anadata out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by paramcd param;
MPRINT(UTIL_LABELS_FROM_VAR):   ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 3548 observations read from the data set WORK.CSS_ANADATA.
NOTE: SAS sort was used.
NOTE: 3546 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 2 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by paramcd;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.paramcd and last.paramcd) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each PARAMCD value should have exacly one PARAM value." paramcd= param=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("paramcd_val"!!put(_n_, 8.-L)), strip(paramcd));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("paramcd_lab"!!put(_n_, 8.-L)), strip(param));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 2 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from PARAMCD and PARAM
111
112      %*--- Baseline visit: Number (&B_VISN_N), Names (&B_VISN_VAL1) and Labels (&B_VISN_LAB1) ---*;
113        %util_labels_from_var(&m_lb..&m_ds, avisitn, avisit, prefix=b_visn, whr=avisitn eq &b_visn)
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISIT is a variable on data set WORK.ADVS_SUB.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_SUB is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_SUB, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set WORK.ADVS_SUB.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: b_visn_n from work.advs_sub where avisitn eq 0;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol B_VISN_N = 1
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=work.advs_sub out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by avisitn avisit;
MPRINT(UTIL_LABELS_FROM_VAR):   where avisitn eq 0 ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 506 observations read from the data set WORK.ADVS_SUB.
      WHERE avisitn=0;
NOTE: SAS sort was used.
NOTE: 505 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 1 observations and 45 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by avisitn;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.avisitn and last.avisitn) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each AVISITN value should have exacly one AVISIT value." avisitn= avisit=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("b_visn_val"!!put(_n_, 8.-L)), strip(avisitn));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("b_visn_lab"!!put(_n_, 8.-L)), strip(avisit));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:1
NOTE: There were 1 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from AVISITN and AVISIT
114
115      %*--- Endpoint visit: Number (&E_VISN_N), Names (&E_VISN_VAL1) and Labels (&E_VISN_LAB1) ---*;
116        %util_labels_from_var(css_anadata, avisitn, avisit, prefix=e_visn, whr=avisitn eq &e_visn)
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISIT is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_ANADATA.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: e_visn_n from css_anadata where avisitn eq 99;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol E_VISN_N = 1
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_anadata out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by avisitn avisit;
MPRINT(UTIL_LABELS_FROM_VAR):   where avisitn eq 99 ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 454 observations read from the data set WORK.CSS_ANADATA.
      WHERE avisitn=99;
NOTE: SAS sort was used.
NOTE: 453 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by avisitn;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.avisitn and last.avisitn) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each AVISITN value should have exacly one AVISIT value." avisitn= avisit=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("e_visn_val"!!put(_n_, 8.-L)), strip(avisitn));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("e_visn_lab"!!put(_n_, 8.-L)), strip(avisit));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:1
NOTE: There were 1 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from AVISITN and AVISIT
117
118      %*--- Number of treatments: Set &TRTN from ana variable T_VAR ---*;
119        %util_count_unique_values(css_anadata, &t_var, trtn)
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTP_SHORT is a variable on data set CSS_ANADATA.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(trtp_short)) into: trtn from css_anadata ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol TRTN = 3
120
121
122    /*** BOXPLOT for each PARAMETER and ANALYSIS TIMEPOINT in selected data
123
124      One box plot for each PARAMETER and ANALYSIS TIMEPOINT.
125      By Visit and Treatment.
126
127      In case of many visits and treatments, each box plot will use multiple pages.
128
129      UTIL_PROC_TEMPLATE parameters:
130        TEMPLATE     Positional parameter, the name of the template to compile.
131        DESIGNWIDTH  Default is 260mm, suitable for one full-page landscape Letter/A4 plot.
132                     130mm is suitable for these 2 side-by-side plots.
133        DESIGNHEIGHT Default is 170mm, suitable for one full-page landscape Letter/A4 plot.
134
135      BOXPLOT_EACH_PARAM_TP parameters:
136        CLEANUP      Default is 1, delete intermediate data sets.
137                     Set to 0 (zero) to preserve temp data sets from the final loop.
138
139    ***/
140
141      %util_proc_template(phuseboxplot)
MPRINT(UTIL_PROC_TEMPLATE):   *--- Set marker size relative to IQR outlier: MEAN symbol is +1, Normal Range outlier is -1 ---*;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Box width, Box plot cluster width and Scatter cluster width should all match ---*;
MPRINT(UTIL_PROC_TEMPLATE):   proc template;
MPRINT(UTIL_PROC_TEMPLATE):   define statgraph PhUSEboxplot;
MPRINT(UTIL_PROC_TEMPLATE):   dynamic _TITLE _DESIGN_WIDTH _DESIGN_HEIGHT _MARKERS _BLOCKLABEL _XVAR _YVAR _YOUTLIERS _YLABEL _YMIN _YMAX _YINCR _REFLINES _PERIOD _N _MEAN _STD _DATAMIN _Q1 _MEDIAN _Q3 _DATAMAX _PVAL ;
MPRINT(UTIL_PROC_TEMPLATE):   begingraph / attrpriority=none border=false pad=0 dataskin=none designwidth=260mm designheight=170mm ;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_TITLE)) entrytitle _TITLE;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Define extra legend items for Outlier markers. Define these OUTSIDE the layout block ---*;
MPRINT(UTIL_PROC_TEMPLATE):   legenditem type=marker name='IQROutliers' / label='IQR Outliers' markerattrs=(color=CX000000 symbol=square size=6);
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_YOUTLIERS)) legenditem type=marker name='NormalRangeOutliers' / label='Normal Range Outliers' markerattrs=(color=CXFF0000 symbol=circlefilled size=5 );
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   layout overlay / walldisplay=none pad=(top=20) yaxisopts=(type=linear display=standard label=_YLABEL linearopts=(viewmin=_YMIN viewmax=_YMAX tickvaluesequence=(start=_YMIN end=_YMAX increment=_YINCR) ) )
xaxisopts=(type=discrete display=(line) discreteopts=(colorbands=even colorbandsattrs=GraphBlock (transparency=0.7)) );
MPRINT(UTIL_PROC_TEMPLATE):   *--- TOP INNER MARGIN: Timepoint labels appear across the top of the plot area ---*;
MPRINT(UTIL_PROC_TEMPLATE):   innermargin / align=top separator=false pad=0;
MPRINT(UTIL_PROC_TEMPLATE):   blockplot x=_XVAR block=_BLOCKLABEL / display=(outline values) valuefitpolicy=split valuehalign=left valuevalign=top ;
MPRINT(UTIL_PROC_TEMPLATE):   endinnermargin;
MPRINT(UTIL_PROC_TEMPLATE):   *--- MAIN BOX PLOT: Including IQR outliers. Cluster width must match that of Scatter plot, and the Box plot width. By default, they do not match! ---*;
MPRINT(UTIL_PROC_TEMPLATE):   boxplot x=_XVAR y=_YVAR / name='box' group=_MARKERS groupdisplay=cluster clusterwidth=0.6 capshape=serif boxwidth=0.6 display=(notches caps mean median fill outliers) fillattrs=(color=CXB9CFE7)
outlineattrs=GraphOutlines(color=navy thickness=0.01) medianattrs=(color=navy) whiskerattrs=(color=navy) meanattrs=(size=7) outlierattrs=(color=cx000000 symbol=square size=6) ;
MPRINT(UTIL_PROC_TEMPLATE):   *--- OUTLIER SCATTER PLOT: Normal Range Outliers, IF NON-MISSING. Cluster width must match that of Box plot. By default, they do not match! ---*;
MPRINT(UTIL_PROC_TEMPLATE):   IF ( MEAN(_YOUTLIERS) NE . ) scatterplot x=_XVAR y=_YOUTLIERS / name='scatter' group=_MARKERS groupdisplay=cluster clusterwidth=0.6 jitter=auto markerattrs=(color=CXFF0000 symbol=circlefilled size=5 ) legendlabel='Normal
Range Outliers' ;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Normal Range Reference lines, IF PROVIDED ---*;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_REFLINES)) referenceline y=eval(coln(_REFLINES)) / lineattrs=(color=red) name='Reference Lines';
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- KNOWN LIMITATION: 'box' markers work in SAS 9.4 M3 and later. See header notes. ---*;
MPRINT(UTIL_PROC_TEMPLATE):   discretelegend 'box' 'IQROutliers' 'NormalRangeOutliers' / type=marker location=outside valign=bottom border=false title='Treatments & Outliers:' ;
MPRINT(UTIL_PROC_TEMPLATE):   innermargin / align=bottom separator=false pad=(bottom=0);
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_PERIOD)) axistable x=_XVAR value=_PERIOD / class=_MARKERS label='Period' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MARKERS)) axistable x=_XVAR value=_MARKERS / class=_MARKERS label='Treatment' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_N)) axistable x=_XVAR value=_N / class=_MARKERS label='n' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MEAN)) axistable x=_XVAR value=_MEAN / class=_MARKERS label='Mean' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_STD)) axistable x=_XVAR value=_STD / class=_MARKERS label='Std Dev' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_DATAMIN)) axistable x=_XVAR value=_DATAMIN / class=_MARKERS label='Min' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_Q1)) axistable x=_XVAR value=_Q1 / class=_MARKERS label='Q1' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MEDIAN)) axistable x=_XVAR value=_MEDIAN / class=_MARKERS label='Median' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_Q3)) axistable x=_XVAR value=_Q3 / class=_MARKERS label='Q3' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_DATAMAX)) axistable x=_XVAR value=_DATAMAX / class=_MARKERS label='Max' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_PVAL)) axistable x=_XVAR value=_PVAL / class=_MARKERS label='P Value' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   endinnermargin;
MPRINT(UTIL_PROC_TEMPLATE):   endlayout;
MPRINT(UTIL_PROC_TEMPLATE):   endgraph;
MPRINT(UTIL_PROC_TEMPLATE):   end;
NOTE: Overwriting existing template/link: PhUSEboxplot
NOTE: STATGRAPH 'PhUSEboxplot' has been saved to: SASUSER.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.93 seconds
      cpu time            0.04 seconds


MPRINT(UTIL_PROC_TEMPLATE):   run;
142
143      %macro boxplot_each_param_tp(plotds=css_anadata, cleanup=1);
144
145        %local pdx tdx css_pval_ds;
146
147        %do pdx = 1 %to &paramcd_n;
148
149          /*** LOOP 1 *****************************************************
150           *** Loop through each PARAMETER, working with ALL TIMEPOINTS ***
151           ****************************************************************/
152            data css_nextparam;
153              set &plotds (where=(paramcd = "&&paramcd_val&pdx"));
154            run;
155
156          %*--- Analysis Timepoints for this parameter: Num (&ATPTN_N), Names (&ATPTN_VAL1 ...) and Labels (&ATPTN_LAB1 ...) ---*;
157            %util_labels_from_var(css_nextparam, atptn, atpt)
158
159          %*--- Y-AXIS alternative: Fix Y-Axis MIN/MAX based on all timepoints for PARAM. See Y-AXIS DEFAULT, below. ---*;
160          %*   %util_get_var_min_max(css_nextparam, &c_var, chg_min_max)   *;
161
162
163          %do tdx = 1 %to &atptn_n;
164
165            /*** LOOP 2 ********************************************************************
166             *** Loop through each TIMEPOINT for this parameter, working with ALL VISITS ***
167             *** NB: PROC SORT here is REQUIRED in order to merge on STAT details, below ***
168             *******************************************************************************/
169              proc sort data=css_nextparam (where=(atptn = &&atptn_val&tdx))
170                         out=css_nexttimept;
171                by avisitn &tn_var;
172              run;
173
174            %*--- Y-AXIS DEFAULT: Set Y-Axis MIN/MAX based on this timepoint. See Y-AXIS alternative, above. ---*;
175              %util_get_var_min_max(css_nexttimept, &c_var, chg_min_max)
176
177            %*--- Number of visits for this parameter and analysis timepoint: &VISN ---*;
178              %util_count_unique_values(css_nexttimept, avisitn, visn)
179
180            %*--- Create format string to display MEAN and STDDEV to default sig-digs: &UTIL_VALUE_FORMAT ---*;
181              %util_value_format(css_nexttimept, &c_var)
182
183            %*--- Create macro variable BOXPLOT_VISIT_RANGES, to subset visits into box plot pages ---*;
184              %util_boxplot_visit_ranges(css_nexttimept, vvisn=avisitn, vtrtn=&tn_var);
185
186
187            *--- Calculate summary statistics, KEEP LABELS of VISIT and TRT for plotting, below ---*;
188              proc summary data=css_nexttimept noprint;
189                by avisitn &tn_var avisit &t_var;
190                var &c_var;
191                output out=css_stats (drop=_type_ _freq_)
192                       n=n mean=mean std=std median=median min=datamin max=datamax q1=q1 q3=q3;
193              run;
194
195
196            %*--- Add ANCOVA p-values for Endpoint: CHG = BASE + TRT (if user specified a reference arm) ---*;
197              %if %length(&b_var) > 0 and %length(&ref_trtn) > 0 %then %do;
198                %local endpoint_definition;
199
200                %let css_pval_ds = css_pvalues;
201                %let endpoint_definition = avisitn = &e_visn;
202
203                ods select parameterestimates;
204                ods output parameterestimates = &css_pval_ds;
205
206                proc glm data=css_nexttimept;
207                  where &endpoint_definition;
208                  class &tn_var (ref="&ref_trtn");
209                  model &c_var = &b_var &tn_var / solution;
210                run; quit;
211
212                *--- UPDATE CSS_STATS with p-values for active arms, at Endpoint visit ---*;
213                  data temp;
214                    *--- We simply need the structure of these vars, for subsequent merge ---*;
215                    set css_stats (keep=avisitn &tn_var);
216                    STOP;
217                  run;
218
219                  data &css_pval_ds;
220                    set temp &css_pval_ds (keep=parameter probt
221                                           rename=(probt=pval)
222                                           where=(parameter=:"%upcase(&tn_var)"));
223                    label pval="GLM ANCOVA p-value: Reference is %upcase(&tn_var) = &ref_trtn";
224                    &endpoint_definition;
225                    &tn_var = input(scan(parameter,-1,' '), best8.);
226                  run;
227
228                  proc sort data=&css_pval_ds;
229                    by avisitn &tn_var;
230                  run;
231
232                  data css_stats;
233                    merge css_stats &css_pval_ds (keep=avisitn &tn_var pval);
234                    by avisitn &tn_var;
235                  run;
236
237                  %util_delete_dsets(temp);
238              %end;
239
240            /***
241              STACK statistics (do NOT merge) BELOW the plot data, one obs per TREATMENT/VISIT.
242              NB: We need exactly ONE obs per timepoint and trt: AXISTABLE defaults to a SUM function
243            ***/
244              data css_plot;
245                set css_nexttimept
246                    css_stats;
247
248                format mean %scan(&util_value_format, 1, %str( )) std %scan(&util_value_format, 2, %str( ));
249              run;
250
251
252            *--- Graphics Settings - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are missing ---*;
253              options orientation=landscape missing=' ';
254              goptions reset=all;
255
256              ods graphics on / reset=all;
257              ods graphics    / border=no attrpriority=COLOR;
258
259              title     justify=left height=1.2 "Box Plot - &&paramcd_lab&pdx Change from %upcase(&B_VISN_LAB1) to %upcase(&E_VISN_LAB1) by Visit, Analysis Timepoint: &&atptn_lab&tdx";
260              footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and interquartile range (IQR, the box height); the whiskers extend to the minimum';
261              footnote2 justify=left height=1.0 'and maximum data points within 1.5 IQR of the lower and upper quartiles, respectively. Values outside the whiskers are shown as outliers.';
262              footnote3 justify=left height=1.0 'Means are marked with a different symbol for each treatment. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
263
264              %let y_axis = %util_axis_order( %scan(&chg_min_max,1,%str( )), %scan(&chg_min_max,2,%str( )) );
265
266            *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
267              ods listing close;
268              ods pdf file="&outputs_folder\WPCT-F.07.02_Box_plot_&&paramcd_val&pdx.._Change_by_visit_for_timepoint_&&atptn_val&tdx...pdf"
269                      notoc bookmarklist=none dpi=300
270                      author="(&SYSUSERID) PhUSE CS Standard Analysis Library"
271                      subject='PhUSE CS Measures of Central Tendency'
272                      title="Boxplot of &&paramcd_lab&pdx Change from Baseline by Visit for Analysis Timepoint &&atptn_lab&tdx"
273                      ;
274
275
276            /*** LOOP 3 - FINALLY, A Graph ****************************
277             *** - Multiple pages in case of many visits/treatments ***
278             **********************************************************/
279
280              %local vdx nxtvis;
281              %let vdx=1;
282              %do %while (%qscan(&boxplot_visit_ranges,&vdx,|) ne );
283                %let nxtvis = %qscan(&boxplot_visit_ranges,&vdx,|);
284
285                proc sgrender data=css_plot (where=( &nxtvis )) template=PhUSEboxplot ;
286                  dynamic
287                          _MARKERS    = "&t_var"
288                          _XVAR       = 'avisitn'
289                          _BLOCKLABEL = 'avisit'
290                          _YVAR       = "&c_var"
291                          _REFLINES   = "0"
292                          _YLABEL     = "Change in &&paramcd_lab&pdx"
293                          _YMIN       = %scan(&y_axis, 1, %str( ))
294                          _YMAX       = %scan(&y_axis, 3, %str( ))
295                          _YINCR      = %scan(&y_axis, 5, %str( ))
296                          _N          = 'n'
297                          _MEAN       = 'mean'
298                          _STD        = 'std'
299                          _DATAMIN    = 'datamin'
300                          _Q1         = 'q1'
301                          _MEDIAN     = 'median'
302                          _Q3         = 'q3'
303                          _DATAMAX    = 'datamax'
304
305                          %if %length(&b_var) > 0 and %length(&ref_trtn) > 0 %then %do;
306                            _PVAL       = 'pval'
307                          %end;
308
309                          ;
310                run;
311
312                %let vdx=%eval(&vdx+1);
313              %end; %* --- LOOP 3 - Pages of box plots, VDX ---*;
314
315            *--- Release the PDF output file! ---*;
316              ods pdf close;
317              ods listing;
318
319          %end; %*--- LOOP 2 - Time Points, TDX ---*;
320
321        %end; %*--- LOOP 1 - Parameters, PDX ---*;
322
323
324        *--- Clean up temp data sets required to create box plots ---*;
325          %if &cleanup %then %util_delete_dsets(css_nextparam css_nexttimept &css_pval_ds css_stats css_plot);
326
327      %mend boxplot_each_param_tp;
328
329      %boxplot_each_param_tp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_nextparam;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_anadata (where=(paramcd = "DIABP"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_ANADATA.
      WHERE paramcd='DIABP';
NOTE: The data set WORK.CSS_NEXTPARAM has 1774 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPT is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(atptn)) into: atptn_n from css_nextparam ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol ATPTN_N = 1
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_nextparam out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn atpt;
MPRINT(UTIL_LABELS_FROM_VAR):   ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTPARAM.
NOTE: SAS sort was used.
NOTE: 1773 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.atptn and last.atptn) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each ATPTN value should have exacly one ATPT value." atptn= atpt=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_val"!!put(_n_, 8.-L)), strip(atptn));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_lab"!!put(_n_, 8.-L)), strip(atpt));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:1
NOTE: There were 1 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from ATPTN and ATPT
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_nextparam (where=(atptn = 815)) out=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTPARAM.
      WHERE atptn=815;
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_NEXTTIMEPT has 1774 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_GET_VAR_MIN_MAX):   proc sql noprint;
MPRINT(UTIL_GET_VAR_MIN_MAX):   select min(chg), max(chg) into :minval, :maxval from css_nexttimept ;
MPRINT(UTIL_GET_VAR_MIN_MAX):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_GET_VAR_MIN_MAX) Successfully created symbol CHG_MIN_MAX = -38 41.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: visn from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol VISN = 10
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(chg, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput('util_value_format', strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 1774 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;

NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol UTIL_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "20"
NOTE: (ASSERT_DEPEND) Result is PASS.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_VAR_NONMISSING) If DMS process locks the data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_NONMISSING) Result is PASS. 0 Missing values for variable "AVISITN" on data set "CSS_NEXTTIMEPT" (where=).
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_VAR_NONMISSING) If DMS process locks the data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_NONMISSING) Result is PASS. 0 Missing values for variable "TRTPN" on data set "CSS_NEXTTIMEPT" (where=).
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: numvis from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol NUMVIS = 10
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(trtpn)) into: numtrt from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol NUMTRT = 3
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Expect VISIT var of type N, but handle char var of type C ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   data _null_;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   set css_nexttimept;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   call symput('vistyp', vtype(avisitn));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   call symput('vislen', vlength(avisitn));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   STOP;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:189
NOTE: There were 1 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   proc sort data=css_nexttimept (keep=avisitn trtpn) out=temp_vis_trt nodupkey;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   by avisitn trtpn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: SAS sort was used.
NOTE: 1744 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMP_VIS_TRT has 30 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   data _null_;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   set temp_vis_trt end=NoMore;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   by avisitn trtpn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Create BOXPLOT_VISIT_RANGES, to limit number of boxes per plot page to &MAX_BOXES_PER_PAGE ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   length boxplot_visit_ranges $870 start_visit 8;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   retain boxes_on_page 0 boxplot_visit_ranges ' ' start_visit . ;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if 0 = boxes_on_page then start_visit = avisitn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxes_on_page + 1;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Within a visit, keep all trts together: On last obs for this visit, is there room for another set of boxes? ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if last.avisitn then do;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if NoMore or boxes_on_page + 3 > 20 then do;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Current visit is enough for this plot. No more boxes. Next visit would be too much ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxplot_visit_ranges = strip(boxplot_visit_ranges) !!strip(compbl( put(start_visit, best8.-L) !!" <= avisitn <= " !!put(avisitn, best8.-L) )) !!'|';
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxes_on_page = 0;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   end;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   end;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if NoMore then call symput('boxplot_visit_ranges', strip(boxplot_visit_ranges));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: There were 30 observations read from the data set WORK.TEMP_VIS_TRT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP_VIS_TRT;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP_VIS_TRT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


Note: (UTIL_BOXPLOT_VISIT_RANGES) Default visit ranges for each plot produces, limiting to 20 boxes max per page.
Note: (UTIL_BOXPLOT_VISIT_RANGES) BOXPLOT_VISIT_RANGES set to: 2 <= avisitn <= 16|20 <= avisitn <= 99|
MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Calculate summary statistics, KEEP LABELS of VISIT and TRT for plotting, below ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn avisit trtp_short;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var chg;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_stats (drop=_type_ _freq_) n=n mean=mean std=std median=median min=datamin max=datamax q1=q1 q3=q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_STATS has 30 observations and 12 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   ods select parameterestimates;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods output parameterestimates = css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc glm data=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   where avisitn = 99;
MPRINT(BOXPLOT_EACH_PARAM_TP):   class trtpn (ref="0");
MPRINT(BOXPLOT_EACH_PARAM_TP):   model chg = base trtpn / solution;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The data set WORK.CSS_PVALUES has 5 observations and 7 variables.
MPRINT(BOXPLOT_EACH_PARAM_TP):   quit;

NOTE: PROCEDURE GLM used (Total process time):
      real time           0.36 seconds
      cpu time            0.10 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- UPDATE CSS_STATS with p-values for active arms, at Endpoint visit ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data temp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- We simply need the structure of these vars, for subsequent merge ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_stats (keep=avisitn trtpn);
MPRINT(BOXPLOT_EACH_PARAM_TP):   STOP;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1 observations read from the data set WORK.CSS_STATS.
NOTE: The data set WORK.TEMP has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set temp css_pvalues (keep=parameter probt rename=(probt=pval) where=(parameter=:"TRTPN"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   label pval= "GLM ANCOVA p-value: Reference is TRTPN = 0";
MPRINT(BOXPLOT_EACH_PARAM_TP):   avisitn = 99;
MPRINT(BOXPLOT_EACH_PARAM_TP):   trtpn = input(scan(parameter,-1,' '), best8.);
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
      WHERE parameter=:'TRTPN';
NOTE: The data set WORK.CSS_PVALUES has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_PVALUES has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   merge css_stats css_pvalues (keep=avisitn trtpn pval);
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 30 observations read from the data set WORK.CSS_STATS.
NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
NOTE: The data set WORK.CSS_STATS has 30 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_plot;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_nexttimept css_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format mean 5.1 std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: There were 30 observations read from the data set WORK.CSS_STATS.
NOTE: The data set WORK.CSS_PLOT has 1804 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Graphics Settings - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are missing ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   options orientation=landscape missing=' ';
MPRINT(BOXPLOT_EACH_PARAM_TP):   goptions reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics on / reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics / border=no attrpriority=COLOR;
MPRINT(BOXPLOT_EACH_PARAM_TP):   title justify=left height=1.2 "Box Plot - Diastolic Blood Pressure (mmHg) Change from BASELINE
to END OF TREATMENT by Visit, Analysis Timepoint: AFTER LYING DOWN FOR 5 MINUTES";
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and
interquartile range (IQR, the box height); the whiskers extend to the minimum';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote2 justify=left height=1.0 'and maximum data points within 1.5 IQR of the lower and
upper quartiles, respectively. Values outside the whiskers are shown as outliers.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote3 justify=left height=1.0 'Means are marked with a different symbol for each
treatment. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing close;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf
file="C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_DIABP_Change_by_visit_for_timepoint_815.pdf"
notoc bookmarklist=none dpi=300 author="(ditommd1) PhUSE CS Standard Analysis Library" subject='PhUSE CS Measures of Central
Tendency' title="Boxplot of Diastolic Blood Pressure (mmHg) Change from Baseline by Visit for Analysis Timepoint AFTER LYING
DOWN FOR 5 MINUTES" ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_DIABP_Change_by_visit_for_timepoint_815.pdf",
      printer "PDF".
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 2 <= avisitn <= 16 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _MARKERS = "trtp_short" _XVAR = 'avisitn' _BLOCKLABEL = 'avisit' _YVAR = "chg"
_REFLINES = "0" _YLABEL = "Change in Diastolic Blood Pressure (mmHg)" _YMIN = -40 _YMAX = 48 _YINCR = 8 _N = 'n' _MEAN = 'mean'
_STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3' _DATAMAX = 'datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 1210 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisitn>=2 and avisitn<=16);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           25.85 seconds
      cpu time            3.52 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 20 <= avisitn <= 99 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _MARKERS = "trtp_short" _XVAR = 'avisitn' _BLOCKLABEL = 'avisit' _YVAR = "chg"
_REFLINES = "0" _YLABEL = "Change in Diastolic Blood Pressure (mmHg)" _YMIN = -40 _YMAX = 48 _YINCR = 8 _N = 'n' _MEAN = 'mean'
_STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3' _DATAMAX = 'datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 594 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisitn>=20 and avisitn<=99);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           8.24 seconds
      cpu time            1.87 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Release the PDF output file! ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf close;
NOTE: ODS PDF printed 2 pages to
      C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_DIABP_Change_by_visit_for_timepoint_815.pdf.
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_nextparam;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_anadata (where=(paramcd = "SYSBP"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_ANADATA.
      WHERE paramcd='SYSBP';
NOTE: The data set WORK.CSS_NEXTPARAM has 1774 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPT is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(atptn)) into: atptn_n from css_nextparam ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol ATPTN_N = 1
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_nextparam out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn atpt;
MPRINT(UTIL_LABELS_FROM_VAR):   ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTPARAM.
NOTE: SAS sort was used.
NOTE: 1773 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 1 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.atptn and last.atptn) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each ATPTN value should have exacly one ATPT value." atptn=
atpt=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_val"!!put(_n_, 8.-L)), strip(atptn));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_lab"!!put(_n_, 8.-L)), strip(atpt));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:1
NOTE: There were 1 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from ATPTN and ATPT
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_nextparam (where=(atptn = 816)) out=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTPARAM.
      WHERE atptn=816;
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_NEXTTIMEPT has 1774 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_GET_VAR_MIN_MAX):   proc sql noprint;
MPRINT(UTIL_GET_VAR_MIN_MAX):   select min(chg), max(chg) into :minval, :maxval from css_nexttimept ;
MPRINT(UTIL_GET_VAR_MIN_MAX):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_GET_VAR_MIN_MAX) Successfully created symbol CHG_MIN_MAX = -82 80.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: visn from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol VISN = 10
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(chg, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput('util_value_format', strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 1774 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;

NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol UTIL_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "20"
NOTE: (ASSERT_DEPEND) Result is PASS.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_VAR_NONMISSING) If DMS process locks the data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_NONMISSING) Result is PASS. 0 Missing values for variable "AVISITN" on data set "CSS_NEXTTIMEPT" (where=).
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_VAR_NONMISSING) If DMS process locks the data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_NONMISSING) Result is PASS. 0 Missing values for variable "TRTPN" on data set "CSS_NEXTTIMEPT" (where=).
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(avisitn)) into: numvis from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol NUMVIS = 10
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(trtpn)) into: numtrt from css_nexttimept ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol NUMTRT = 3
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Expect VISIT var of type N, but handle char var of type C ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   data _null_;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   set css_nexttimept;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   call symput('vistyp', vtype(avisitn));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   call symput('vislen', vlength(avisitn));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   STOP;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:189
NOTE: There were 1 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   proc sort data=css_nexttimept (keep=avisitn trtpn) out=temp_vis_trt nodupkey;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   by avisitn trtpn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: SAS sort was used.
NOTE: 1744 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMP_VIS_TRT has 30 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   data _null_;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   set temp_vis_trt end=NoMore;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   by avisitn trtpn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Create BOXPLOT_VISIT_RANGES, to limit number of boxes per plot page to
&MAX_BOXES_PER_PAGE ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   length boxplot_visit_ranges $870 start_visit 8;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   retain boxes_on_page 0 boxplot_visit_ranges ' ' start_visit . ;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if 0 = boxes_on_page then start_visit = avisitn;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxes_on_page + 1;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Within a visit, keep all trts together: On last obs for this visit, is there room for
another set of boxes? ---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if last.avisitn then do;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if NoMore or boxes_on_page + 3 > 20 then do;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   *--- Current visit is enough for this plot. No more boxes. Next visit would be too much
---*;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxplot_visit_ranges = strip(boxplot_visit_ranges) !!strip(compbl( put(start_visit,
best8.-L) !!" <= avisitn <= " !!put(avisitn, best8.-L) )) !!'|';
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   boxes_on_page = 0;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   end;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   end;
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   if NoMore then call symput('boxplot_visit_ranges', strip(boxplot_visit_ranges));
MPRINT(UTIL_BOXPLOT_VISIT_RANGES):   run;

NOTE: There were 30 observations read from the data set WORK.TEMP_VIS_TRT.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP_VIS_TRT;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP_VIS_TRT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


Note: (UTIL_BOXPLOT_VISIT_RANGES) Default visit ranges for each plot produces, limiting to 20 boxes max per page.
Note: (UTIL_BOXPLOT_VISIT_RANGES) BOXPLOT_VISIT_RANGES set to: 2 <= avisitn <= 16|20 <= avisitn <= 99|
MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Calculate summary statistics, KEEP LABELS of VISIT and TRT for plotting, below ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn avisit trtp_short;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var chg;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_stats (drop=_type_ _freq_) n=n mean=mean std=std median=median min=datamin
max=datamax q1=q1 q3=q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_STATS has 30 observations and 12 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   ods select parameterestimates;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods output parameterestimates = css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc glm data=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   where avisitn = 99;
MPRINT(BOXPLOT_EACH_PARAM_TP):   class trtpn (ref="0");
MPRINT(BOXPLOT_EACH_PARAM_TP):   model chg = base trtpn / solution;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The data set WORK.CSS_PVALUES has 5 observations and 7 variables.
MPRINT(BOXPLOT_EACH_PARAM_TP):   quit;

NOTE: PROCEDURE GLM used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- UPDATE CSS_STATS with p-values for active arms, at Endpoint visit ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data temp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- We simply need the structure of these vars, for subsequent merge ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_stats (keep=avisitn trtpn);
MPRINT(BOXPLOT_EACH_PARAM_TP):   STOP;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1 observations read from the data set WORK.CSS_STATS.
NOTE: The data set WORK.TEMP has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set temp css_pvalues (keep=parameter probt rename=(probt=pval) where=(parameter=:"TRTPN"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   label pval= "GLM ANCOVA p-value: Reference is TRTPN = 0";
MPRINT(BOXPLOT_EACH_PARAM_TP):   avisitn = 99;
MPRINT(BOXPLOT_EACH_PARAM_TP):   trtpn = input(scan(parameter,-1,' '), best8.);
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
      WHERE parameter=:'TRTPN';
NOTE: The data set WORK.CSS_PVALUES has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_PVALUES has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   merge css_stats css_pvalues (keep=avisitn trtpn pval);
MPRINT(BOXPLOT_EACH_PARAM_TP):   by avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 30 observations read from the data set WORK.CSS_STATS.
NOTE: There were 3 observations read from the data set WORK.CSS_PVALUES.
NOTE: The data set WORK.CSS_STATS has 30 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_plot;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_nexttimept css_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format mean 5.1 std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1774 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: There were 30 observations read from the data set WORK.CSS_STATS.
NOTE: The data set WORK.CSS_PLOT has 1804 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Graphics Settings - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are
missing ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   options orientation=landscape missing=' ';
MPRINT(BOXPLOT_EACH_PARAM_TP):   goptions reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics on / reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics / border=no attrpriority=COLOR;
MPRINT(BOXPLOT_EACH_PARAM_TP):   title justify=left height=1.2 "Box Plot - Systolic Blood Pressure (mmHg) Change from BASELINE
to END OF TREATMENT by Visit, Analysis Timepoint: AFTER STANDING FOR 1 MINUTE";
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and
interquartile range (IQR, the box height); the whiskers extend to the minimum';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote2 justify=left height=1.0 'and maximum data points within 1.5 IQR of the lower and
upper quartiles, respectively. Values outside the whiskers are shown as outliers.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote3 justify=left height=1.0 'Means are marked with a different symbol for each
treatment. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing close;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf
file="C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_SYSBP_Change_by_visit_for_timepoint_816.pdf"
notoc bookmarklist=none dpi=300 author="(ditommd1) PhUSE CS Standard Analysis Library" subject='PhUSE CS Measures of Central
Tendency' title="Boxplot of Systolic Blood Pressure (mmHg) Change from Baseline by Visit for Analysis Timepoint AFTER STANDING
FOR 1 MINUTE" ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_SYSBP_Change_by_visit_for_timepoint_816.pdf",
      printer "PDF".
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 2 <= avisitn <= 16 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _MARKERS = "trtp_short" _XVAR = 'avisitn' _BLOCKLABEL = 'avisit' _YVAR = "chg"
_REFLINES = "0" _YLABEL = "Change in Systolic Blood Pressure (mmHg)" _YMIN = -100 _YMAX = 80 _YINCR = 20 _N = 'n' _MEAN =
'mean' _STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3' _DATAMAX = 'datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 1210 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisitn>=2 and avisitn<=16);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           20.55 seconds
      cpu time            3.29 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 20 <= avisitn <= 99 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _MARKERS = "trtp_short" _XVAR = 'avisitn' _BLOCKLABEL = 'avisit' _YVAR = "chg"
_REFLINES = "0" _YLABEL = "Change in Systolic Blood Pressure (mmHg)" _YMIN = -100 _YMAX = 80 _YINCR = 20 _N = 'n' _MEAN =
'mean' _STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3' _DATAMAX = 'datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 594 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisitn>=20 and avisitn<=99);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           7.89 seconds
      cpu time            1.82 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Release the PDF output file! ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf close;
NOTE: ODS PDF printed 2 pages to
      C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.02_Box_plot_SYSBP_Change_by_visit_for_timepoint_816.pdf.
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Clean up temp data sets required to create box plots ---*;
MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete CSS_NEXTPARAM CSS_NEXTTIMEPT CSS_PVALUES CSS_STATS CSS_PLOT;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.CSS_NEXTPARAM (memtype=DATA).
NOTE: Deleting WORK.CSS_NEXTTIMEPT (memtype=DATA).
NOTE: Deleting WORK.CSS_PVALUES (memtype=DATA).
NOTE: Deleting WORK.CSS_STATS (memtype=DATA).
NOTE: Deleting WORK.CSS_PLOT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


330
331    /*** END boxplotting ***/

