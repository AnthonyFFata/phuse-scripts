NOTE: Copyright (c) 2002-2012 by SAS Institute Inc., Cary, NC, USA.
NOTE: SAS (r) Proprietary Software 9.4 (TS1M2)
      Licensed to F. HOFFMANN LA ROCHE AG, Site 50701490.
NOTE: This session is executing on the X64_7PRO  platform.



NOTE: Updated analytical products:

      SAS/STAT 13.2
      SAS/ETS 13.2
      SAS/IML 13.2
      SAS/QC 13.2

NOTE: Additional host information:

 X64_7PRO WIN 6.1.7601 Service Pack 1 Workstation

NOTE: SAS initialization used:
      real time           16.81 seconds
      cpu time            2.32 seconds

1          OPTIONS sasautos=("C:\CSS\phuse-scripts\whitepapers\utilities"
1  ! "C:\CSS\phuse-scripts\whitepapers\ADaM" %sysfunc(getoption(sasautos)));

2     %util_access_test_data(advs, local=C:\CSS\phuse-scripts\data\adam\cdisc-split\)
NOTE: Libref SOURCE was successfully assigned as follows:
      Engine:        XPORT
      Physical Name: C:\CSS\phuse-scripts\data\adam\cdisc-split\advs.xpt

NOTE: There were 32139 observations read from the data set SOURCE.ADVS.
NOTE: The data set WORK.ADVS has 32139 observations and 44 variables.
NOTE: DATA statement used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds


NOTE: Fileref SOURCE has been deassigned.
NOTE: Libref SOURCE has been deassigned.

3
4
5        /*** 2b) USER SUBSET of data, to limit number of box plot outputs, and to shorten Tx
5  ! labels ***/
6
7          data advs_sub;
8            set work.advs;
9            where (paramcd in ('DIABP') and
10                  atptn in (815 817) and
11                  trtpn in (0 81));
12
13           attrib trtp_short length=$6 label='Planned Treatment, abbreviated';
14
15           select (trtp);
16             when ('Placebo')              trtp_short = 'P';
17             when ('Xanomeline High Dose') trtp_short = 'X-high';
18             otherwise                     trtp_short = 'UNEXPECTED';
19           end;
20         run;

NOTE: There were 4078 observations read from the data set WORK.ADVS.
      WHERE (paramcd='DIABP') and atptn in (815, 817) and trtpn in (0, 81);
NOTE: The data set WORK.ADVS_SUB has 4078 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds


21
22         %derive_lastminmax_measure(advs_sub, LAST MIN MAX,
23                                    flvars=anl12fl anl14fl anl16fl,
24                                    grpvars=studyid usubjid trtpn paramcd atptn,
25                                    ordvars=avisitn,
26                                    incl=trtp_short saffl param atpt anrlo anrhi,
27                                    dsout=advs_chg)

NOTE: There were 4078 observations read from the data set WORK.ADVS_SUB.
NOTE: The data set WORK.LMM_BASE has 1012 observations and 45 variables.
NOTE: The data set WORK.LMM_POST has 3066 observations and 45 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds



NOTE: There were 1 observations read from the data set WORK.ADVS_SUB.
NOTE: The data set WORK.ADVS_CHG has 0 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_BASE_ANL created, with 340 rows and 14 columns.

NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_POST_ANL created, with 608 rows and 14 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds



NOTE: There were 340 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_BASE_ANL has 340 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



NOTE: There were 608 observations read from the data set WORK.LMM_POST_ANL.
NOTE: 277 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=80 ADT=05JUL2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=81
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=70 ADT=05JUL2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=82
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=88 ADT=13MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=101
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=85 ADT=13MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=102
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=86 ADT=27JAN2013 STUDYID=CDISCPILOT01 USUBJID=01-711-1433 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=138
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=64 ADT=21SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=221
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=84 ADT=21SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=222
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=70 ADT=22JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=257
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=78 ADT=22JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=258
NOTE: There were 340 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.LMM_BASE_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds



NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



NOTE: There were 0 observations read from the data set WORK.ADVS_CHG.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.ADVS_CHG has 662 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_BASE_ANL created, with 423 rows and 14 columns.

NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_POST_ANL created, with 529 rows and 14 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds



NOTE: There were 423 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: 83 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_BASE_ANL has 340 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



NOTE: There were 529 observations read from the data set WORK.LMM_POST_ANL.
NOTE: 198 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds



WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=80 ADT=05JUL2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=81
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=70 ADT=03JUL2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=82
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=84 ADT=09MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=101
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=80 ADT=09MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=102
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=86 ADT=27JAN2013 STUDYID=CDISCPILOT01 USUBJID=01-711-1433 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=138
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=64 ADT=21SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=221
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=76 ADT=19SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=222
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=70 ADT=22JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=257
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=78 ADT=20JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=258
NOTE: There were 340 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.LMM_BASE_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds



NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



NOTE: There were 662 observations read from the data set WORK.ADVS_CHG.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.ADVS_CHG has 1324 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_BASE_ANL created, with 408 rows and 14 columns.

NOTE: The query requires remerging summary statistics back with the original data.
NOTE: Table WORK.LMM_POST_ANL created, with 501 rows and 14 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds



NOTE: There were 408 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: 68 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_BASE_ANL has 340 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds



NOTE: There were 501 observations read from the data set WORK.LMM_POST_ANL.
NOTE: 170 observations with duplicate key values were deleted.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds



WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=88 ADT=30JUN2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=81
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=80 ADT=30JUN2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1018 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=82
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=88 ADT=13MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=101
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=85 ADT=13MAY2013 STUDYID=CDISCPILOT01 USUBJID=01-705-1382 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=0 trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=102
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=94 ADT=23JAN2013 STUDYID=CDISCPILOT01 USUBJID=01-711-1433 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=138
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=110 ADT=08SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=815 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=221
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=100 ADT=08SEP2013 STUDYID=CDISCPILOT02 USUBJID=02-708-1236 TRTPN=81
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=X-high SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=222
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=90 ADT=09JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=815 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER LYING DOWN FOR 5 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0
FIRST.USUBJID=1 LAST.USUBJID=0 FIRST.TRTPN=1 LAST.TRTPN=0 FIRST.PARAMCD=1 LAST.PARAMCD=0
FIRST.ATPTN=1 LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=257
WARNING: (DERIVE_LASTMINMAX_MEASURES) Omitting obs without a post-baseline measure, such as
in_base=1 in_post=0 AVAL=92 ADT=09JUL2013 STUDYID=CDISCPILOT02 USUBJID=02-710-1083 TRTPN=0
PARAMCD=DIABP ATPTN=817 AVISITN=. trtp_short=P SAFFL=Y PARAM=Diastolic Blood Pressure (mmHg)
ATPT=AFTER STANDING FOR 3 MINUTES ANRLO=60 ANRHI=90 FIRST.STUDYID=0 LAST.STUDYID=0 FIRST.USUBJID=0
LAST.USUBJID=1 FIRST.TRTPN=0 LAST.TRTPN=1 FIRST.PARAMCD=0 LAST.PARAMCD=1 FIRST.ATPTN=1
LAST.ATPTN=1 avisit=  base=. chg=. _ERROR_=0 _N_=258
NOTE: There were 340 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.LMM_BASE_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds



NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: The data set WORK.LMM_POST_ANL has 331 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds



NOTE: There were 1324 observations read from the data set WORK.ADVS_CHG.
NOTE: There were 331 observations read from the data set WORK.LMM_BASE_ANL.
NOTE: There were 331 observations read from the data set WORK.LMM_POST_ANL.
NOTE: The data set WORK.ADVS_CHG has 1986 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds



NOTE: Deleting WORK.LMM_BASE (memtype=DATA).
NOTE: Deleting WORK.LMM_POST (memtype=DATA).
NOTE: Deleting WORK.LMM_BASE_ANL (memtype=DATA).
NOTE: Deleting WORK.LMM_POST_ANL (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.29 seconds
      cpu time            0.07 seconds


28
29
30       %*--- 3) Key user settings ---*;
31
32         %let m_lb   = work;
33         %let m_ds   = advs_chg;
34
35         %let t_var  = trtp_short;
36         %let tn_var = trtpn;
37         %let m_var  = aval;
38         %let c_var  = chg;
39
40         %let lo_var = anrlo;
41         %let hi_var = anrhi;
42
43         %let b_var  = base;
44         %let ref_trtn = 0;
45
46         %let p_fl = saffl;
47
48         %let a_lastfl = anl12fl;
49         %let a_minfl  = anl14fl;
50         %let a_maxfl  = anl16fl;
51
52         %let ref_lines = NARROW;
53
54         %let max_boxes_per_page = 12;
55
56         %let outputs_folder = C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas;
57
58     /*** end USER PROCESSING AND SETTINGS ***********************************
59      *** RELAX.                                                           ***
60      *** The rest should simply work, or alert you to invalid conditions. ***
61      ************************************************************************
62     ***/
63
64
65
66     /*** SETUP & CHECK DEPENDENCIES
67       Explain to user in case environment or data do not support this analysis
68
69       Keep just those variables and records required for this analysis
70       For details, see specifications at top
71     ***/
72
73       options nocenter mautosource mrecall mprint msglevel=I mergenoby=WARN ls=max ps=max;
74
75       %let ana_variables = STUDYID USUBJID &p_fl &a_lastfl &a_minfl &a_maxfl &t_var &tn_var PARAM PARAMCD &m_var &c_var &b_var &lo_var &hi_var AVISITN ATPT ATPTN;
76
77       %*--- Global boolean symbol CONTINUE, used with macro assert_continue(), warns user of invalid environment. Processing should HALT. ---*;
78         %let CONTINUE = %assert_depend(OS=%str(AIX,WIN,HP IPF),
79                                        SASV=9.4M2,
80                                        SYSPROD=,
81                                        vars=%str(&m_lb..&m_ds : &ana_variables),
82                                        macros=assert_continue util_labels_from_var util_count_unique_values
83                                               util_get_reference_lines util_proc_template util_get_var_min_max
84                                               util_value_format util_boxplot_block_ranges util_axis_order util_delete_dsets,
85                                        symbols=m_lb m_ds t_var tn_var m_var c_var b_var lo_var hi_var ref_trtn p_fl a_lastfl a_minfl a_maxfl
86                                                ref_lines max_boxes_per_page outputs_folder
87                                       );
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. STUDYID is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. USUBJID is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. SAFFL is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANL12FL is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANL14FL is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANL16FL is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTP_SHORT is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAM is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVAL is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. BASE is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANRLO is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANRHI is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPT is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set WORK.ADVS_CHG is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set WORK.ADVS_CHG, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set WORK.ADVS_CHG.
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro ASSERT_CONTINUE in "C:\CSS\phuse-scripts\whitepapers\utilities\assert_continue.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_LABELS_FROM_VAR in "C:\CSS\phuse-scripts\whitepapers\utilities\util_labels_from_var.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_COUNT_UNIQUE_VALUES in "C:\CSS\phuse-scripts\whitepapers\utilities\util_count_unique_values.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_GET_REFERENCE_LINES in "C:\CSS\phuse-scripts\whitepapers\utilities\util_get_reference_lines.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_PROC_TEMPLATE in "C:\CSS\phuse-scripts\whitepapers\utilities\util_proc_template.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_GET_VAR_MIN_MAX in "C:\CSS\phuse-scripts\whitepapers\utilities\util_get_var_min_max.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_VALUE_FORMAT in "C:\CSS\phuse-scripts\whitepapers\utilities\util_value_format.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_BOXPLOT_BLOCK_RANGES in "C:\CSS\phuse-scripts\whitepapers\utilities\util_boxplot_block_ranges.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_AXIS_ORDER in "C:\CSS\phuse-scripts\whitepapers\utilities\util_axis_order.sas".
NOTE: (ASSERT_MACRO_EXIST) PASS, found macro UTIL_DELETE_DSETS in "C:\CSS\phuse-scripts\whitepapers\utilities\util_delete_dsets.sas".
NOTE: (ASSERT_DEPEND) PASS, found mac var M_LB with value "work"
NOTE: (ASSERT_DEPEND) PASS, found mac var M_DS with value "advs_chg"
NOTE: (ASSERT_DEPEND) PASS, found mac var T_VAR with value "trtp_short"
NOTE: (ASSERT_DEPEND) PASS, found mac var TN_VAR with value "trtpn"
NOTE: (ASSERT_DEPEND) PASS, found mac var M_VAR with value "aval"
NOTE: (ASSERT_DEPEND) PASS, found mac var C_VAR with value "chg"
NOTE: (ASSERT_DEPEND) PASS, found mac var B_VAR with value "base"
NOTE: (ASSERT_DEPEND) PASS, found mac var LO_VAR with value "anrlo"
NOTE: (ASSERT_DEPEND) PASS, found mac var HI_VAR with value "anrhi"
NOTE: (ASSERT_DEPEND) PASS, found mac var REF_TRTN with value "0"
NOTE: (ASSERT_DEPEND) PASS, found mac var P_FL with value "saffl"
NOTE: (ASSERT_DEPEND) PASS, found mac var A_LASTFL with value "anl12fl"
NOTE: (ASSERT_DEPEND) PASS, found mac var A_MINFL with value "anl14fl"
NOTE: (ASSERT_DEPEND) PASS, found mac var A_MAXFL with value "anl16fl"
NOTE: (ASSERT_DEPEND) PASS, found mac var REF_LINES with value "NARROW"
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "12"
NOTE: (ASSERT_DEPEND) PASS, found mac var OUTPUTS_FOLDER with value "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas"
NOTE: (ASSERT_DEPEND) Result is PASS.
88
89         %assert_continue(After asserting the dependencies of this script)
NOTE: (ASSERT_CONTINUE) After asserting the dependencies of this script. OK to continue.
90
91
92       /*** Data Prep
93         1. Restrict analysis to SAFETY POP (&p_fl) and ANALYSIS OBS (&a_lastfl or &a_minfl or &a_maxfl)
94         2. Plot requires a Change-type discrete variable for the X-Axis, to cluster boxes and stats
95         3. Plot requires an X-Axis variable that follows Change-type and Period (BASE or POST).
96            ==> NB: PhUSEboxplot GTL template requires all values, BASE and POST, in one column.
97       ***/
98         %macro null;
99           /*--- Simplify dynamic processing, below, since user can specify 1, 2 or all 3 flags.
100                Note the use of these symbols, later: If user did not supply a variable, resulting comparisons are 'N' = 'Y' (impossible).
101                This should be easier to read (and write!) than a bunch of conditional logic for each potential flag variable.
102          ---*/
103          %if %length(&a_lastfl.&a_minfl.&a_maxfl) = 0 %then %put ERROR: (WPCT-F.07.08) All user-specified analysis flags are missing. Expect failure due to 0 obs.;
104          %if %length(&a_lastfl) = 0 %then %let a_lastfl = 'N';
105          %if %length(&a_minfl)  = 0 %then %let a_minfl  = 'N';
106          %if %length(&a_maxfl)  = 0 %then %let a_maxfl  = 'N';
107        %mend null;
108        %null;
109
110        data css_pooled;
111          set &m_lb..&m_ds (keep=&ana_variables);
112          where &p_fl = 'Y' and (&a_lastfl = 'Y' or &a_minfl = 'Y' or &a_maxfl = 'Y');
113
114          *--- Create Change-type Name and Number vars, to groups boxes in plots ---*;
115            attrib chgtype length=$22 label='Identify type of obs (measure, baseline & change) as Last, Min or Max';
116
117            if &a_lastfl = 'Y' then do;
118              chgtypen = 1;
119              chgtype  = 'Last BASE to Last POST';
120            end;
121            else if &a_minfl = 'Y' then do;
122              chgtypen = 2;
123              chgtype  = 'Min BASE to Min POST';
124            end;
125            else if &a_maxfl = 'Y' then do;
126              chgtypen = 3;
127              chgtype  = 'Max BASE to Max POST';
128            end;
129
130          *--- Create a Normal Range Outlier variable, for scatter plot overlay ---*;
131            if (2 = n(&m_var, &lo_var) and &m_var < &lo_var) or
132               (2 = n(&m_var, &hi_var) and &m_var > &hi_var) then m_var_outlier = &m_var;
133            else m_var_outlier = .;
134        run;

NOTE: There were 1986 observations read from the data set WORK.ADVS_CHG.
      WHERE (saffl='Y') and ((anl12fl='Y') or (anl14fl='Y') or (anl16fl='Y'));
NOTE: The data set WORK.CSS_POOLED has 1986 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.06 seconds


135
136        *--- Replace AVISIT and AVISITN with plot-specific text. NB: Expect exactly 2 visits / usubj, BL & P-BL ---*;
137          proc sort data=css_pooled;
138            by chgtypen &tn_var paramcd atptn usubjid avisitn;
139          run;

NOTE: There were 1986 observations read from the data set WORK.CSS_POOLED.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_POOLED has 1986 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


140
141          data css_pooled;
142            set css_pooled;
143            by chgtypen &tn_var paramcd atptn usubjid avisitn;
144
145            attrib avisit label='BASE or POST, to match user-specified Baseline and Post-baseline visits';
146
147            if first.usubjid and not last.usubjid then do;
148              avisit = 'BASE';
149              avisitn= 1;
150            end;
151            else if not first.usubjid and last.usubjid then do;
152              avisit = 'POST';
153              avisitn= 2;
154            end;
155            else do;
156              if first.usubjid then put 'WARNING: (WPCT-F.07.08) Expecting exactly 2 visits (not 1) for ' &tn_var= usubjid= paramcd= atptn= avisitn=;
157              else put 'WARNING: (WPCT-F.07.08) Unexpected extra visit for ' &tn_var= usubjid= paramcd= atptn= avisitn=;
158              avisit = 'UNK';
159              avisitn=99;
160            end;
161          run;

NOTE: There were 1986 observations read from the data set WORK.CSS_POOLED.
NOTE: The data set WORK.CSS_POOLED has 1986 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds


162
163        *--- Create CHGTYPEVISITN with plot-specific DISCRETE VALUEs for X-Axis, based on CHGTYPE and AVISIT ---*;
164          proc sort data=css_pooled;
165            by chgtypen avisitn &tn_var;
166          run;

NOTE: There were 1986 observations read from the data set WORK.CSS_POOLED.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_POOLED has 1986 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


167
168          data css_anadata;
169            set css_pooled;
170            by chgtypen avisitn &tn_var;
171
172            attrib chgtypevisitn label='X-Axis discrete numeric values for plot, from (Change Mode).(Visit Seq)';
173            if first.chgtypen then do;
174              chgtypevisitn = floor(chgtypevisitn);
175              chgtypevisitn + 1;
176            end;
177            if first.avisitn then chgtypevisitn + 0.1;
178        run;

NOTE: There were 1986 observations read from the data set WORK.CSS_POOLED.
NOTE: The data set WORK.CSS_ANADATA has 1986 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


179
180
181    /*** GATHER INFO for data-driven processing
182      Collect required information about these measurements:
183
184      Number, Names and Labels of PARAMCDs - used to cycle through parameters that have measurements
185        &PARAMCD_N count of parameters
186        &PARAMCD_VAL1 to &&&PARAMCD_VAL&PARAMCD_N series of parameter codes
187        &PARAMCD_LAB1 to &&&PARAMCD_LAB&PARAMCD_N series of parameter labels
188
189    ***/
190
191      %*--- Parameters: Number (&PARAMCD_N), Names (&PARAMCD_VAL1 ...) and Labels (&PARAMCD_LAB1 ...) ---*;
192        %util_labels_from_var(css_anadata, paramcd, param)
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAM is a variable on data set CSS_ANADATA.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_ANADATA is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_ANADATA, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. PARAMCD is a variable on data set CSS_ANADATA.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(paramcd)) into: paramcd_n from css_anadata ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol PARAMCD_N = 1
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_anadata out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by paramcd param;
MPRINT(UTIL_LABELS_FROM_VAR):   ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 1986 observations read from the data set WORK.CSS_ANADATA.
NOTE: SAS sort was used.
NOTE: 1985 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 1 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by paramcd;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.paramcd and last.paramcd) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each PARAMCD value should have exacly one PARAM value." paramcd= param=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("paramcd_val"!!put(_n_, 8.-L)), strip(paramcd));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("paramcd_lab"!!put(_n_, 8.-L)), strip(param));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 1 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from PARAMCD and PARAM
193
194
195    /*** BOXPLOT for each PARAMETER and ANALYSIS TIMEPOINT in selected data
196
197      Two box plots per page for each PARAMETER and ANALYSIS TIMEPOINT.
198      By Visit number and Treatment.
199
200      In case of >2 treatments, each PARAM/TIMEPOINT will use multiple pages.
201
202      UTIL_PROC_TEMPLATE parameters:
203        TEMPLATE     Positional parameter, the name of the template to compile.
204        DESIGNWIDTH  Default is 260mm, suitable for one full-page landscape Letter/A4 plot.
205                     130mm is suitable for these 2 side-by-side plots.
206        DESIGNHEIGHT Default is 170mm, suitable for one full-page landscape Letter/A4 plot.
207
208      BOXPLOT_EACH_PARAM_TP parameters:
209        CLEANUP      Default is 1, delete intermediate data sets.
210                     Set to 0 (zero) to preserve temp data sets from the final loop.
211
212    ***/
213
214      %util_proc_template(phuseboxplot, designwidth=130mm)
MPRINT(UTIL_PROC_TEMPLATE):   *--- Set marker size relative to IQR outlier: MEAN symbol is +1, Normal Range outlier is -1 ---*;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Box width, Box plot cluster width and Scatter cluster width should all match ---*;
MPRINT(UTIL_PROC_TEMPLATE):   proc template;
MPRINT(UTIL_PROC_TEMPLATE):   define statgraph PhUSEboxplot;
MPRINT(UTIL_PROC_TEMPLATE):   dynamic _TITLE _DESIGN_WIDTH _DESIGN_HEIGHT _MARKERS _BLOCKLABEL _XVAR _YVAR _YOUTLIERS _YLABEL _YMIN _YMAX _YINCR _REFLINES _PERIOD _N _MEAN _STD _DATAMIN _Q1 _MEDIAN _Q3 _DATAMAX _PVAL ;
MPRINT(UTIL_PROC_TEMPLATE):   begingraph / attrpriority=none border=false pad=0 dataskin=none designwidth=130mm designheight=170mm ;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_TITLE)) entrytitle _TITLE;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Define extra legend items for Outlier markers. Define these OUTSIDE the layout block ---*;
MPRINT(UTIL_PROC_TEMPLATE):   legenditem type=marker name='IQROutliers' / label='IQR Outliers' markerattrs=(color=CX000000 symbol=square size=6);
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_YOUTLIERS)) legenditem type=marker name='NormalRangeOutliers' / label='Normal Range Outliers' markerattrs=(color=CXFF0000 symbol=circlefilled size=5 );
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   layout overlay / walldisplay=none pad=(top=20) yaxisopts=(type=linear display=standard label=_YLABEL linearopts=(viewmin=_YMIN viewmax=_YMAX tickvaluesequence=(start=_YMIN end=_YMAX increment=_YINCR) ) )
xaxisopts=(type=discrete display=(line) discreteopts=(colorbands=even colorbandsattrs=GraphBlock (transparency=0.7)) );
MPRINT(UTIL_PROC_TEMPLATE):   *--- TOP INNER MARGIN: Timepoint labels appear across the top of the plot area ---*;
MPRINT(UTIL_PROC_TEMPLATE):   innermargin / align=top separator=false pad=0;
MPRINT(UTIL_PROC_TEMPLATE):   blockplot x=_XVAR block=_BLOCKLABEL / display=(outline values) valuefitpolicy=split valuehalign=left valuevalign=top ;
MPRINT(UTIL_PROC_TEMPLATE):   endinnermargin;
MPRINT(UTIL_PROC_TEMPLATE):   *--- MAIN BOX PLOT: Including IQR outliers. Cluster width must match that of Scatter plot, and the Box plot width. By default, they do not match! ---*;
MPRINT(UTIL_PROC_TEMPLATE):   boxplot x=_XVAR y=_YVAR / name='box' group=_MARKERS groupdisplay=cluster clusterwidth=0.6 capshape=serif boxwidth=0.6 display=(notches caps mean median fill outliers) fillattrs=(color=CXB9CFE7)
outlineattrs=GraphOutlines(color=navy thickness=0.01) medianattrs=(color=navy) whiskerattrs=(color=navy) meanattrs=(size=7) outlierattrs=(color=cx000000 symbol=square size=6) ;
MPRINT(UTIL_PROC_TEMPLATE):   *--- OUTLIER SCATTER PLOT: Normal Range Outliers, IF NON-MISSING. Cluster width must match that of Box plot. By default, they do not match! ---*;
MPRINT(UTIL_PROC_TEMPLATE):   IF ( MEAN(_YOUTLIERS) NE . ) scatterplot x=_XVAR y=_YOUTLIERS / name='scatter' group=_MARKERS groupdisplay=cluster clusterwidth=0.6 jitter=auto markerattrs=(color=CXFF0000 symbol=circlefilled size=5 ) legendlabel='Normal
Range Outliers' ;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- Normal Range Reference lines, IF PROVIDED ---*;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_REFLINES)) referenceline y=eval(coln(_REFLINES)) / lineattrs=(color=red) name='Reference Lines';
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   *--- KNOWN LIMITATION: 'box' markers work in SAS 9.4 M3 and later. See header notes. ---*;
MPRINT(UTIL_PROC_TEMPLATE):   discretelegend 'box' 'IQROutliers' 'NormalRangeOutliers' / type=marker location=outside valign=bottom border=false title='Treatments & Outliers:' ;
MPRINT(UTIL_PROC_TEMPLATE):   innermargin / align=bottom separator=false pad=(bottom=0);
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_PERIOD)) axistable x=_XVAR value=_PERIOD / class=_MARKERS label='Period' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MARKERS)) axistable x=_XVAR value=_MARKERS / class=_MARKERS label='Treatment' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_N)) axistable x=_XVAR value=_N / class=_MARKERS label='n' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MEAN)) axistable x=_XVAR value=_MEAN / class=_MARKERS label='Mean' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_STD)) axistable x=_XVAR value=_STD / class=_MARKERS label='Std Dev' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_DATAMIN)) axistable x=_XVAR value=_DATAMIN / class=_MARKERS label='Min' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_Q1)) axistable x=_XVAR value=_Q1 / class=_MARKERS label='Q1' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_MEDIAN)) axistable x=_XVAR value=_MEDIAN / class=_MARKERS label='Median' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_Q3)) axistable x=_XVAR value=_Q3 / class=_MARKERS label='Q3' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_DATAMAX)) axistable x=_XVAR value=_DATAMAX / class=_MARKERS label='Max' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   IF (EXISTS(_PVAL)) axistable x=_XVAR value=_PVAL / class=_MARKERS label='P Value' classdisplay=cluster colorgroup=_MARKERS;
MPRINT(UTIL_PROC_TEMPLATE):   ENDIF;
MPRINT(UTIL_PROC_TEMPLATE):   endinnermargin;
MPRINT(UTIL_PROC_TEMPLATE):   endlayout;
MPRINT(UTIL_PROC_TEMPLATE):   endgraph;
MPRINT(UTIL_PROC_TEMPLATE):   end;
NOTE: Overwriting existing template/link: PhUSEboxplot
NOTE: STATGRAPH 'PhUSEboxplot' has been saved to: SASUSER.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           1.20 seconds
      cpu time            0.12 seconds


MPRINT(UTIL_PROC_TEMPLATE):   run;
215
216      %macro boxplot_each_param_tp(plotds=css_anadata, cleanup=1);
217
218        %local pdx tdx css_pval_ds;
219
220        %do pdx = 1 %to &paramcd_n;
221
222          /*** LOOP 1 *****************************************************
223           *** Loop through each PARAMETER, working with ALL TIMEPOINTS ***
224           ****************************************************************/
225            data css_nextparam;
226              set &plotds (where=(paramcd = "&&paramcd_val&pdx"));
227            run;
228
229          %*--- Analysis Timepoints for this parameter: Num (&ATPTN_N), Names (&ATPTN_VAL1 ...) and Labels (&ATPTN_LAB1 ...) ---*;
230            %util_labels_from_var(css_nextparam, atptn, atpt)
231
232          %*--- Create NXT_REFLINES: a list of reference lines for this parameter, across all timepoints ---*;
233            %util_get_reference_lines(css_nextparam, nxt_reflines,
234                                      low_var=&lo_var, high_var=&hi_var, ref_lines=&ref_lines)
235
236          %*--- Y-AXIS DEFAULT: Fix Y-Axis MIN/MAX based on all timepoints for PARAM. See Y-AXIS DEFAULT, below. ---*;
237          %*--- NB: EXTRA normal range reference lines could expand Y-AXIS range.                                    ---*;
238            %util_get_var_min_max(css_nextparam, &m_var, aval_min_max, extra=&nxt_reflines)
239            %util_get_var_min_max(css_nextparam, &c_var, chg_min_max)
240
241
242          %do tdx = 1 %to &atptn_n;
243
244            /*** LOOP 2 **************************************************************************
245             *** Loop through each TIMEPOINT for this parameter, working with ALL Change Types ***
246             *** NB: PROC SORT here is REQUIRED in order to merge on STAT details, below       ***
247             *************************************************************************************/
248              proc sort data=css_nextparam (where=(atptn = &&atptn_val&tdx))
249                         out=css_nexttimept;
250                by chgtypen avisitn &tn_var;
251              run;
252
253            %*--- Y-AXIS alternative: Set Y-Axis MIN/MAX based on this timepoint. See Y-AXIS alternative, above. ---*;
254            %*--- NB: EXTRA normal range reference lines could expand Y-AXIS range (left-hand plot, observed values). ---*;
255            %*  %util_get_var_min_max(css_nexttimept, &m_var, aval_min_max, extra=&nxt_reflines)   *;
256            %*  %util_get_var_min_max(css_nexttimept, &c_var, chg_min_max)                         *;
257
258            %*--- Create format string to display MEAN and STDDEV to default sig-digs: &UTIL_VALUE_FORMAT for measures, &CHG_VALUE_FORMAT for change ---*;
259              %util_value_format(css_nexttimept, &m_var, sym=util_value_format)
260              %util_value_format(css_nexttimept, &c_var, sym=chg_value_format)
261
262            %*--- Create macro variable BOXPLOT_BLOCK_RANGES, to subset change-type/visit into box plot pages ---*;
263              %util_boxplot_block_ranges(css_nexttimept, blockvar=chgtypen, catvars=avisitn &tn_var)
264
265
266            *--- Calculate summary statistics for VALUEs and CHANGE. KEEP LABELS of CHANGE TYPE, AVISIT and TRT for plotting, below ---*;
267              proc summary data=css_nexttimept noprint;
268                by chgtypen avisitn &tn_var chgtype avisit &t_var chgtypevisitn;
269                var &m_var;
270                output out=css_stats (drop=_type_ _freq_)
271                       n=n mean=mean std=std median=median min=datamin max=datamax q1=q1 q3=q3;
272              run;
273
274              %local endpoint_definition;
275              %let endpoint_definition = avisit = 'POST';
276
277              proc summary data=css_nexttimept (where=(&endpoint_definition)) noprint;
278                by chgtypen avisitn &tn_var chgtype avisit &t_var chgtypevisitn;
279                var &c_var;
280                output out=css_c_stats (drop=_type_ _freq_)
281                       n=c_n mean=c_mean std=c_std median=c_median min=c_datamin max=c_datamax q1=c_q1 q3=c_q3;
282              run;
283
284
285            %*--- Add ANCOVA p-values for Endpoint: CHG = BASE + TRT (if user specified a reference arm) ---*;
286              %if %length(&b_var) > 0 and %length(&ref_trtn) > 0 %then %do;
287
288                %let css_pval_ds = css_pvalues;
289
290                ods select parameterestimates;
291                ods output parameterestimates = &css_pval_ds;
292
293                proc glm data=css_nexttimept;
294                  by chgtypen avisitn chgtypevisitn;
295                  where &endpoint_definition;
296                  class &tn_var (ref="&ref_trtn");
297                  model &c_var = &b_var &tn_var / solution;
298                run; quit;
299
300                *--- UPDATE CSS_C_STATS with p-values for active arms, at Endpoint visit ---*;
301                  data temp;
302                    *--- We simply need the structure of these vars, for subsequent merge ---*;
303                    set css_c_stats (keep=chgtypen avisitn chgtypevisitn &tn_var);
304                    STOP;
305                  run;
306
307                  data &css_pval_ds;
308                    set temp &css_pval_ds (keep=chgtypen avisitn chgtypevisitn parameter probt
309                                           rename=(probt=pval)
310                                           where=(parameter=:"%upcase(&tn_var)"));
311                    label pval="GLM ANCOVA p-value: Reference is %upcase(&tn_var) = &ref_trtn";
312                    &endpoint_definition;
313                    &tn_var = input(scan(parameter,-1,' '), best8.);
314                  run;
315
316                  proc sort data=&css_pval_ds;
317                    by chgtypen avisitn &tn_var;
318                  run;
319
320                  data css_c_stats;
321                    merge css_c_stats &css_pval_ds (keep=chgtypen avisitn &tn_var pval);
322                    by chgtypen avisitn &tn_var;
323                  run;
324
325                  %util_delete_dsets(temp);
326              %end;
327
328
329              /***
330                STACK statistics (do NOT merge) BELOW the plot data, one obs per TREATMENT/VISIT.
331                NB: We need exactly ONE obs per timepoint and trt: AXISTABLE defaults to a SUM function
332              ***/
333              data css_plot;
334                set css_nexttimept
335                    css_stats
336                    css_c_stats;
337
338                format mean %scan(&util_value_format, 1, %str( )) std %scan(&util_value_format, 2, %str( ));
339                format c_mean %scan(&chg_value_format, 1, %str( )) c_std %scan(&chg_value_format, 2, %str( ));
340              run;
341
342
343            *--- Graphics Adjustments - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are missing ---*;
344              options orientation=landscape missing=' ';
345              goptions reset=all;
346
347              ods graphics on / reset=all;
348              ods graphics    / border=no attrpriority=COLOR;
349
350              title1    justify=left height=1.2 "Box Plot - &&paramcd_lab&pdx Last/Min/Max Baseline versus Last/Min/Max Post-baseline by Treatment";
351              title2    justify=left height=1.2 "Analysis Timepoint: &&atptn_lab&tdx";
352              footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and interquartile range (IQR, the box height); the whiskers extend to the minimum and maximum data points';
353              footnote2 justify=left height=1.0 'within 1.5 IQR of the lower and upper quartiles, respectively. Values outside the whiskers are shown as outliers. Means are marked with a different symbol for each treatment.';
354              footnote3 justify=left height=1.0 'Red dots indicate measures outside the normal reference range. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
355
356              %let aval_axis = %util_axis_order( %scan(&aval_min_max,1,%str( )), %scan(&aval_min_max,2,%str( )) );
357              %let chg_axis  = %util_axis_order( %scan(&chg_min_max,1, %str( )), %scan(&chg_min_max,2, %str( )) );
358
359            *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
360              ods listing close;
361
362              ods pdf file="&outputs_folder\WPCT-F.07.08_Box_plot_&&paramcd_val&pdx.._lastminmax_change_timepoint_&&atptn_val&tdx...pdf"
363                      notoc bookmarklist=none columns=2 dpi=300 startpage=no
364                      author="(&SYSUSERID) PhUSE CS Standard Analysis Library"
365                      subject='PhUSE CS Measures of Central Tendency'
366                      title="Boxplot of &&paramcd_lab&pdx Last/Min/Max Baseline versus Last/Min/Max Post-baseline by Treatment for Analysis Timepoint &&atptn_lab&tdx"
367                      ;
368
369
370            /*** LOOP 3 - FINALLY, A Graph ****************************
371             *** - Multiple pages in case of many visits/treatments ***
372             **********************************************************/
373
374              %local vdx nxtvis;
375              %let vdx=1;
376              %do %while (%qscan(&boxplot_block_ranges,&vdx,|) ne );
377                %let nxtvis = %qscan(&boxplot_block_ranges,&vdx,|);
378
379                %*--- After page 1, force a new page in the PDF (see ODS PDF option STARTPAGE=NO, above) ---*;
380                  %if &vdx > 1 %then %do;
381                    ods pdf startpage=now;
382                  %end;
383
384                *--- OBSERVED values (left plot) ---*;
385                  proc sgrender data=css_plot (where=( %unquote(&nxtvis) )) template=PhUSEboxplot ;
386                    dynamic
387                            _TITLE      = 'Observed Values'
388                            _MARKERS    = "&t_var"
389                            _XVAR       = 'chgtypevisitn'
390                            _BLOCKLABEL = 'chgtype'
391                            _YVAR       = "&m_var"
392                            _YOUTLIERS  = 'm_var_outlier'
393
394                            %if %length(&nxt_reflines) > 0 %then %do;
395                              _REFLINES   = "%sysfunc(translate( &nxt_reflines, %str(,), %str( ) ))"
396                            %end;
397
398                            _YLABEL     = "&&paramcd_lab&pdx"
399                            _YMIN       = %scan(&aval_axis, 1, %str( ))
400                            _YMAX       = %scan(&aval_axis, 3, %str( ))
401                            _YINCR      = %scan(&aval_axis, 5, %str( ))
402                            _N          = 'n'
403                            _MEAN       = 'mean'
404                            _STD        = 'std'
405                            _DATAMIN    = 'datamin'
406                            _Q1         = 'q1'
407                            _MEDIAN     = 'median'
408                            _Q3         = 'q3'
409                            _DATAMAX    = 'datamax'
410                            ;
411                  run;
412
413                *--- CHANGE values (right plot) DO NOT DISPLAY baseline visit (always zero change) ---*;
414                  proc sgrender data=css_plot (where=( &endpoint_definition AND %unquote(&nxtvis) )) template=PhUSEboxplot ;
415                    dynamic
416                            _TITLE      = 'Change from Baseline'
417                            _MARKERS    = "&t_var"
418                            _XVAR       = 'chgtypevisitn'
419                            _BLOCKLABEL = 'chgtype'
420                            _YVAR       = "&c_var"
421                            _REFLINES   = "0"
422                            _YLABEL     = "Change in &&paramcd_lab&pdx"
423                            _YMIN       = %scan(&chg_axis, 1, %str( ))
424                            _YMAX       = %scan(&chg_axis, 3, %str( ))
425                            _YINCR      = %scan(&chg_axis, 5, %str( ))
426                            _N          = 'c_n'
427                            _MEAN       = 'c_mean'
428                            _STD        = 'c_std'
429                            _DATAMIN    = 'c_datamin'
430                            _Q1         = 'c_q1'
431                            _MEDIAN     = 'c_median'
432                            _Q3         = 'c_q3'
433                            _DATAMAX    = 'c_datamax'
434
435                            %if %length(&b_var) > 0 and %length(&ref_trtn) > 0 %then %do;
436                              _PVAL       = 'pval'
437                            %end;
438
439                            ;
440                  run;
441
442                %let vdx=%eval(&vdx+1);
443              %end; %* --- LOOP 3 - Pages of box plots, VDX ---*;
444
445            *--- Release the PDF output file! ---*;
446              ods pdf close;
447              ods listing;
448
449          %end; %*--- LOOP 2 - Time Points, TDX ---*;
450
451        %end; %*--- LOOP 1 - Parameters, PDX ---*;
452
453
454        *--- Clean up temp data sets required to create box plots ---*;
455          %if &cleanup %then %util_delete_dsets(css_nextparam css_nexttimept &css_pval_ds css_stats css_c_stats css_plot);
456
457      %mend boxplot_each_param_tp;
458
459      %boxplot_each_param_tp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_nextparam;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_anadata (where=(paramcd = "DIABP"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1986 observations read from the data set WORK.CSS_ANADATA.
      WHERE paramcd='DIABP';
NOTE: The data set WORK.CSS_NEXTPARAM has 1986 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPT is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ATPTN is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   proc sql noprint;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   select count(unique(atptn)) into: atptn_n from css_nextparam ;
MPRINT(UTIL_COUNT_UNIQUE_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_COUNT_UNIQUE_VALUES) Successfully created symbol ATPTN_N = 2
MPRINT(UTIL_LABELS_FROM_VAR):   *--- Create paired sequences of symbols containing values and labels ---*;
MPRINT(UTIL_LABELS_FROM_VAR):   proc sort data=css_nextparam out=css_lfv nodupkey;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn atpt;
MPRINT(UTIL_LABELS_FROM_VAR):   ;
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: There were 1986 observations read from the data set WORK.CSS_NEXTPARAM.
NOTE: SAS sort was used.
NOTE: 1984 observations with duplicate key values were deleted.
NOTE: The data set WORK.CSS_LFV has 2 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   data _null_;
MPRINT(UTIL_LABELS_FROM_VAR):   set css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   by atptn;
MPRINT(UTIL_LABELS_FROM_VAR):   if not (first.atptn and last.atptn) then do;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Each ATPTN value should have exacly one ATPT value." atptn= atpt=;
MPRINT(UTIL_LABELS_FROM_VAR):   put "ERROR: (UTIL_LABELS_FROM_VAR) Most likely you are missing some global symbols.";
MPRINT(UTIL_LABELS_FROM_VAR):   end;
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_val"!!put(_n_, 8.-L)), strip(atptn));
MPRINT(UTIL_LABELS_FROM_VAR):   call symput(strip("atptn_lab"!!put(_n_, 8.-L)), strip(atpt));
MPRINT(UTIL_LABELS_FROM_VAR):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1:1
NOTE: There were 2 observations read from the data set WORK.CSS_LFV.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_LABELS_FROM_VAR):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_LABELS_FROM_VAR):   delete css_lfv;
MPRINT(UTIL_LABELS_FROM_VAR):   quit;
NOTE: Deleting WORK.CSS_LFV (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_LABELS_FROM_VAR) Successfully created symbols for Values and Labels from ATPTN and ATPT
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANRLO is a variable on data set CSS_NEXTPARAM.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. ANRHI is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_GET_REFERENCE_LINES):   proc sql noprint;
MPRINT(UTIL_GET_REFERENCE_LINES):   select distinct anrlo, anrhi, count(anrlo)+nmiss(anrlo) into :lo_vals separated by ', ', :hi_vals separated by ', ', :val_counts separated by ' ' from css_nextparam where n(anrlo, anrhi) > 0 group by anrlo, anrhi;
MPRINT(UTIL_GET_REFERENCE_LINES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (UTIL_GET_REFERENCE_LINES) 1 distinct reference ranges in css_nextparam.
NOTE: (UTIL_GET_REFERENCE_LINES) LOW , HIGH (number of observations)
NOTE: (UTIL_GET_REFERENCE_LINES) 60 , 90 (1986)
NOTE: (UTIL_GET_REFERENCE_LINES) If you see duplicate values, check the HEX values in your data.
MPRINT(UTIL_GET_REFERENCE_LINES):   *--- Use data step and sort to clean up this list of reference lines (Unique, sorted Ascending) ---*;
MPRINT(UTIL_GET_REFERENCE_LINES):   data grl_temp;
MPRINT(UTIL_GET_REFERENCE_LINES):   do val = 60, 90 ;
MPRINT(UTIL_GET_REFERENCE_LINES):   OUTPUT;
MPRINT(UTIL_GET_REFERENCE_LINES):   end;
MPRINT(UTIL_GET_REFERENCE_LINES):   run;

NOTE: The data set WORK.GRL_TEMP has 2 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_GET_REFERENCE_LINES):   proc sql noprint;
MPRINT(UTIL_GET_REFERENCE_LINES):   select distinct val into :nxt_reflines separated by ' ' from grl_temp where not missing(val) order by val;
MPRINT(UTIL_GET_REFERENCE_LINES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_GET_REFERENCE_LINES):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_GET_REFERENCE_LINES):   delete grl_temp;
MPRINT(UTIL_GET_REFERENCE_LINES):   quit;

NOTE: Deleting WORK.GRL_TEMP (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_GET_REFERENCE_LINES) Successfully created macro var NXT_REFLINES with reference values (60 90).
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVAL is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_GET_VAR_MIN_MAX):   proc sql noprint;
MPRINT(UTIL_GET_VAR_MIN_MAX):   select min(aval), max(aval) into :minval, :maxval from css_nextparam ;
MPRINT(UTIL_GET_VAR_MIN_MAX):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_GET_VAR_MIN_MAX) Successfully created symbol AVAL_MIN_MAX = 40 118.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTPARAM is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTPARAM, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTPARAM.
MPRINT(UTIL_GET_VAR_MIN_MAX):   proc sql noprint;
MPRINT(UTIL_GET_VAR_MIN_MAX):   select min(chg), max(chg) into :minval, :maxval from css_nextparam ;
MPRINT(UTIL_GET_VAR_MIN_MAX):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_GET_VAR_MIN_MAX) Successfully created symbol CHG_MIN_MAX = -40 28.
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_nextparam (where=(atptn = 815)) out=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTPARAM.
      WHERE atptn=815;
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_NEXTTIMEPT has 996 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVAL is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   ;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(aval, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput("util_value_format", strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 996 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;
NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol UTIL_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   ;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(chg, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput("chg_value_format", strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 996 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;
NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol CHG_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHGTYPEN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "12"
NOTE: (ASSERT_DEPEND) Result is PASS.
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Ensure that missing numerics print as '.' ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   options missing='.';
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc sort data=css_nexttimept (keep=chgtypen avisitn trtpn) out=bbr_cats nodupkey;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by chgtypen avisitn trtpn;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: SAS sort was used.
NOTE: 984 observations with duplicate key values were deleted.
NOTE: The data set WORK.BBR_CATS has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc freq data=bbr_cats noprint;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   tables chgtypen / missing out=brr_counts (drop=percent);
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 12 observations read from the data set WORK.BBR_CATS.
NOTE: The data set WORK.BRR_COUNTS has 3 observations and 2 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   data brr_pages;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   set brr_counts end=NoMore;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by chgtypen ;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   retain pagecount 0 page 1;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if first.chgtypen then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Alert user when the number of categories is immediately greater than MAX_BOXES_PER_PAGE ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if count > 12 then put "WARNING: (UTIL_BOXPLOT_BLOCK_RANGES) MAX_BOXES_PER_PAGE (12) is too small for this blocking: " chgtypen= count=;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- This BLOCK starts the next page, if current page cannot contain this set of categories ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if pagecount + count > 12 then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   page+1;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   pagecount = count;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   else pagecount + count;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Get TYPE and LENGTH of BLOCKVAR, to determine length of the subsetting clauses created next ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if NoMore then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   call symput('blocktyp', vtype(chgtypen));
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   call symput('blocklen', vlength(chgtypen));
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      9:195
NOTE: There were 3 observations read from the data set WORK.BRR_COUNTS.
NOTE: The data set WORK.BRR_PAGES has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   data brr_ranges;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   set brr_pages;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by page;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   attrib range length=$88;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   retain range ' ';
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if first.page then range = strip(put(chgtypen,8.-L)) !!"<=chgtypen";
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if last.page then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   range = strip(range)!!"<="!!put(chgtypen,8.-L);
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   OUTPUT;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 3 observations read from the data set WORK.BRR_PAGES.
NOTE: The data set WORK.BRR_RANGES has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc sql noprint;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   select distinct range, chgtypen into :boxplot_block_ranges separated by '|', :brr_scrap from brr_ranges order by chgtypen;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete BBR_CATS BRR_COUNTS BRR_PAGES BRR_RANGES;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.BBR_CATS (memtype=DATA).
NOTE: Deleting WORK.BRR_COUNTS (memtype=DATA).
NOTE: Deleting WORK.BRR_PAGES (memtype=DATA).
NOTE: Deleting WORK.BRR_RANGES (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_BOXPLOT_BLOCK_RANGES) Default block ranges for each plot produces, limiting to 12 boxes max per page.
NOTE: (UTIL_BOXPLOT_BLOCK_RANGES) BOXPLOT_BLOCK_RANGES set to: 1<=chgtypen<=3
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Restore prior display of missing numerics ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   options missing=".";
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Calculate summary statistics for VALUEs and CHANGE. KEEP LABELS of CHANGE TYPE, AVISIT and TRT for plotting, below ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn chgtype avisit trtp_short chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var aval;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_stats (drop=_type_ _freq_) n=n mean=mean std=std median=median min=datamin max=datamax q1=q1 q3=q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_STATS has 12 observations and 15 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept (where=(avisit = 'POST')) noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn chgtype avisit trtp_short chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var chg;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_c_stats (drop=_type_ _freq_) n=c_n mean=c_mean std=c_std median=c_median min=c_datamin max=c_datamax q1=c_q1 q3=c_q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 498 observations read from the data set WORK.CSS_NEXTTIMEPT.
      WHERE avisit='POST';
NOTE: The data set WORK.CSS_C_STATS has 6 observations and 15 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   ods select parameterestimates;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods output parameterestimates = css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc glm data=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   where avisit = 'POST';
MPRINT(BOXPLOT_EACH_PARAM_TP):   class trtpn (ref="0");
MPRINT(BOXPLOT_EACH_PARAM_TP):   model chg = base trtpn / solution;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: Interactivity disabled with BY processing.
NOTE: The data set WORK.CSS_PVALUES has 12 observations and 10 variables.
NOTE: PROCEDURE GLM used (Total process time):
      real time           0.29 seconds
      cpu time            0.12 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   quit;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- UPDATE CSS_C_STATS with p-values for active arms, at Endpoint visit ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data temp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- We simply need the structure of these vars, for subsequent merge ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_c_stats (keep=chgtypen avisitn chgtypevisitn trtpn);
MPRINT(BOXPLOT_EACH_PARAM_TP):   STOP;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1 observations read from the data set WORK.CSS_C_STATS.
NOTE: The data set WORK.TEMP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set temp css_pvalues (keep=chgtypen avisitn chgtypevisitn parameter probt rename=(probt=pval) where=(parameter=:"TRTPN"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   label pval= "GLM ANCOVA p-value: Reference is TRTPN = 0";
MPRINT(BOXPLOT_EACH_PARAM_TP):   avisit = 'POST';
MPRINT(BOXPLOT_EACH_PARAM_TP):   trtpn = input(scan(parameter,-1,' '), best8.);
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
      WHERE parameter=:'TRTPN';
NOTE: The data set WORK.CSS_PVALUES has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_PVALUES has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_c_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   merge css_c_stats css_pvalues (keep=chgtypen avisitn trtpn pval);
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 6 observations read from the data set WORK.CSS_C_STATS.
NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
NOTE: The data set WORK.CSS_C_STATS has 6 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_plot;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_nexttimept css_stats css_c_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format mean 5.1 std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format c_mean 5.1 c_std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 996 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: There were 12 observations read from the data set WORK.CSS_STATS.
NOTE: There were 6 observations read from the data set WORK.CSS_C_STATS.
NOTE: The data set WORK.CSS_PLOT has 1014 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Graphics Adjustments - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are missing ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   options orientation=landscape missing=' ';
MPRINT(BOXPLOT_EACH_PARAM_TP):   goptions reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics on / reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics / border=no attrpriority=COLOR;
MPRINT(BOXPLOT_EACH_PARAM_TP):   title1 justify=left height=1.2 "Box Plot - Diastolic Blood Pressure (mmHg) Last/Min/Max
Baseline versus Last/Min/Max Post-baseline by Treatment";
MPRINT(BOXPLOT_EACH_PARAM_TP):   title2 justify=left height=1.2 "Analysis Timepoint: AFTER LYING DOWN FOR 5 MINUTES";
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and
interquartile range (IQR, the box height); the whiskers extend to the minimum and maximum data points';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote2 justify=left height=1.0 'within 1.5 IQR of the lower and upper quartiles,
respectively. Values outside the whiskers are shown as outliers. Means are marked with a different symbol for each treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote3 justify=left height=1.0 'Red dots indicate measures outside the normal reference
range. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing close;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf
file="C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_815.pdf" notoc
bookmarklist=none columns=2 dpi=300 startpage=no author="(ditommd1) PhUSE CS Standard Analysis Library" subject='PhUSE CS
Measures of Central Tendency' title="Boxplot of Diastolic Blood Pressure (mmHg) Last/Min/Max Baseline versus Last/Min/Max
Post-baseline by Treatment for Analysis Timepoint AFTER LYING DOWN FOR 5 MINUTES" ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_815.pdf",
      printer "PDF".
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- OBSERVED values (left plot) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 1<=chgtypen<=3 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _TITLE = 'Observed Values' _MARKERS = "trtp_short" _XVAR = 'chgtypevisitn' _BLOCKLABEL
= 'chgtype' _YVAR = "aval" _YOUTLIERS = 'm_var_outlier' _REFLINES = "60,90" _YLABEL = "Diastolic Blood Pressure (mmHg)" _YMIN =
40 _YMAX = 120 _YINCR = 8 _N = 'n' _MEAN = 'mean' _STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3'
_DATAMAX = 'datamax' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: Multiple concurrent threads will be used to summarize data.
NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 1014 observations read from the data set WORK.CSS_PLOT.
      WHERE (chgtypen>=1 and chgtypen<=3);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           17.70 seconds
      cpu time            2.13 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- CHANGE values (right plot) DO NOT DISPLAY baseline visit (always zero change) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( avisit = 'POST' AND 1<=chgtypen<=3 ))
template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _TITLE = 'Change from Baseline' _MARKERS = "trtp_short" _XVAR = 'chgtypevisitn'
_BLOCKLABEL = 'chgtype' _YVAR = "chg" _REFLINES = "0" _YLABEL = "Change in Diastolic Blood Pressure (mmHg)" _YMIN = -42 _YMAX =
28 _YINCR = 7 _N = 'c_n' _MEAN = 'c_mean' _STD = 'c_std' _DATAMIN = 'c_datamin' _Q1 = 'c_q1' _MEDIAN = 'c_median' _Q3 = 'c_q3'
_DATAMAX = 'c_datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 510 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisit='POST') and (chgtypen>=1 and chgtypen<=3);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           7.32 seconds
      cpu time            1.45 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Release the PDF output file! ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf close;
NOTE: ODS PDF printed 1 page to
      C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_815.pdf.
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_nextparam (where=(atptn = 817)) out=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTPARAM.
      WHERE atptn=817;
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_NEXTTIMEPT has 990 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVAL is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   ;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(aval, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput("util_value_format", strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 990 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;
NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol UTIL_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHG is a variable on data set CSS_NEXTTIMEPT.
MPRINT(UTIL_VALUE_FORMAT):   data css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   set css_nexttimept end=NoMore;
MPRINT(UTIL_VALUE_FORMAT):   ;
MPRINT(UTIL_VALUE_FORMAT):   retain max_int 0 max_dec 0;
MPRINT(UTIL_VALUE_FORMAT):   length int dec $8;
MPRINT(UTIL_VALUE_FORMAT):   valtxt = put(chg, best8.-L);
MPRINT(UTIL_VALUE_FORMAT):   int = scan(valtxt, 1, '.');
MPRINT(UTIL_VALUE_FORMAT):   dec = scan(valtxt, 2, '.');
MPRINT(UTIL_VALUE_FORMAT):   max_int = ifn(not missing(int) and length(int) > max_int, length(int), max_int);
MPRINT(UTIL_VALUE_FORMAT):   max_dec = ifn(not missing(dec) and length(dec) > max_dec, length(dec), max_dec);
MPRINT(UTIL_VALUE_FORMAT):   if NoMore then do;
MPRINT(UTIL_VALUE_FORMAT):   meanfmt = strip(put(max_int+max_dec+2,8.-L))!!'.'!!strip(put(max_dec+1,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   stdvfmt = strip(put(max_int+max_dec+3,8.-L))!!'.'!!strip(put(max_dec+2,8.-L));
MPRINT(UTIL_VALUE_FORMAT):   call symput("chg_value_format", strip(meanfmt)!!' '!!strip(stdvfmt));
MPRINT(UTIL_VALUE_FORMAT):   end;
MPRINT(UTIL_VALUE_FORMAT):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_FMT has 990 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_VALUE_FORMAT):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_VALUE_FORMAT):   delete css_fmt;
MPRINT(UTIL_VALUE_FORMAT):   quit;
NOTE: Deleting WORK.CSS_FMT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


NOTE: (UTIL_VALUE_FORMAT) Successfully created symbol CHG_VALUE_FORMAT = 5.1 6.2
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. CHGTYPEN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. AVISITN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DSET_EXIST) Result is PASS. Data set CSS_NEXTTIMEPT is accessible.
NOTE: (ASSERT_VAR_EXIST) If DMS process locks data set CSS_NEXTTIMEPT, try closing data set ID 1
NOTE: (ASSERT_VAR_EXIST) Result is PASS. TRTPN is a variable on data set CSS_NEXTTIMEPT.
NOTE: (ASSERT_DEPEND) PASS, found mac var MAX_BOXES_PER_PAGE with value "12"
NOTE: (ASSERT_DEPEND) Result is PASS.
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Ensure that missing numerics print as '.' ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   options missing='.';
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc sort data=css_nexttimept (keep=chgtypen avisitn trtpn) out=bbr_cats nodupkey;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by chgtypen avisitn trtpn;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: SAS sort was used.
NOTE: 978 observations with duplicate key values were deleted.
NOTE: The data set WORK.BBR_CATS has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc freq data=bbr_cats noprint;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   tables chgtypen / missing out=brr_counts (drop=percent);
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 12 observations read from the data set WORK.BBR_CATS.
NOTE: The data set WORK.BRR_COUNTS has 3 observations and 2 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   data brr_pages;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   set brr_counts end=NoMore;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by chgtypen ;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   retain pagecount 0 page 1;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if first.chgtypen then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Alert user when the number of categories is immediately greater than
MAX_BOXES_PER_PAGE ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if count > 12 then put "WARNING: (UTIL_BOXPLOT_BLOCK_RANGES) MAX_BOXES_PER_PAGE (12) is
too small for this blocking: " chgtypen= count=;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- This BLOCK starts the next page, if current page cannot contain this set of
categories ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if pagecount + count > 12 then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   page+1;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   pagecount = count;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   else pagecount + count;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Get TYPE and LENGTH of BLOCKVAR, to determine length of the subsetting clauses
created next ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if NoMore then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   call symput('blocktyp', vtype(chgtypen));
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   call symput('blocklen', vlength(chgtypen));
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      9:195
NOTE: There were 3 observations read from the data set WORK.BRR_COUNTS.
NOTE: The data set WORK.BRR_PAGES has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   data brr_ranges;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   set brr_pages;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   by page;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   attrib range length=$88;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   retain range ' ';
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if first.page then range = strip(put(chgtypen,8.-L)) !!"<=chgtypen";
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   if last.page then do;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   range = strip(range)!!"<="!!put(chgtypen,8.-L);
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   OUTPUT;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   end;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   run;

NOTE: There were 3 observations read from the data set WORK.BRR_PAGES.
NOTE: The data set WORK.BRR_RANGES has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   proc sql noprint;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   select distinct range, chgtypen into :boxplot_block_ranges separated by '|', :brr_scrap
from brr_ranges order by chgtypen;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete BBR_CATS BRR_COUNTS BRR_PAGES BRR_RANGES;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.BBR_CATS (memtype=DATA).
NOTE: Deleting WORK.BRR_COUNTS (memtype=DATA).
NOTE: Deleting WORK.BRR_PAGES (memtype=DATA).
NOTE: Deleting WORK.BRR_RANGES (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.04 seconds


NOTE: (UTIL_BOXPLOT_BLOCK_RANGES) Default block ranges for each plot produces, limiting to 12 boxes max per page.
NOTE: (UTIL_BOXPLOT_BLOCK_RANGES) BOXPLOT_BLOCK_RANGES set to: 1<=chgtypen<=3
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   *--- Restore prior display of missing numerics ---*;
MPRINT(UTIL_BOXPLOT_BLOCK_RANGES):   options missing=" ";
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Calculate summary statistics for VALUEs and CHANGE. KEEP LABELS of CHANGE TYPE, AVISIT
and TRT for plotting, below ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn chgtype avisit trtp_short chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var aval;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_stats (drop=_type_ _freq_) n=n mean=mean std=std median=median min=datamin
max=datamax q1=q1 q3=q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: The data set WORK.CSS_STATS has 12 observations and 15 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc summary data=css_nexttimept (where=(avisit = 'POST')) noprint;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn chgtype avisit trtp_short chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   var chg;
MPRINT(BOXPLOT_EACH_PARAM_TP):   output out=css_c_stats (drop=_type_ _freq_) n=c_n mean=c_mean std=c_std median=c_median
min=c_datamin max=c_datamax q1=c_q1 q3=c_q3;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 495 observations read from the data set WORK.CSS_NEXTTIMEPT.
      WHERE avisit='POST';
NOTE: The data set WORK.CSS_C_STATS has 6 observations and 15 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   ods select parameterestimates;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods output parameterestimates = css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc glm data=css_nexttimept;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn chgtypevisitn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   where avisit = 'POST';
MPRINT(BOXPLOT_EACH_PARAM_TP):   class trtpn (ref="0");
MPRINT(BOXPLOT_EACH_PARAM_TP):   model chg = base trtpn / solution;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: Interactivity disabled with BY processing.
NOTE: The data set WORK.CSS_PVALUES has 12 observations and 10 variables.
NOTE: PROCEDURE GLM used (Total process time):
      real time           0.19 seconds
      cpu time            0.14 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   quit;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- UPDATE CSS_C_STATS with p-values for active arms, at Endpoint visit ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data temp;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- We simply need the structure of these vars, for subsequent merge ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_c_stats (keep=chgtypen avisitn chgtypevisitn trtpn);
MPRINT(BOXPLOT_EACH_PARAM_TP):   STOP;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 1 observations read from the data set WORK.CSS_C_STATS.
NOTE: The data set WORK.TEMP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set temp css_pvalues (keep=chgtypen avisitn chgtypevisitn parameter probt rename=(probt=pval)
where=(parameter=:"TRTPN"));
MPRINT(BOXPLOT_EACH_PARAM_TP):   label pval= "GLM ANCOVA p-value: Reference is TRTPN = 0";
MPRINT(BOXPLOT_EACH_PARAM_TP):   avisit = 'POST';
MPRINT(BOXPLOT_EACH_PARAM_TP):   trtpn = input(scan(parameter,-1,' '), best8.);
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 0 observations read from the data set WORK.TEMP.
NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
      WHERE parameter=:'TRTPN';
NOTE: The data set WORK.CSS_PVALUES has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sort data=css_pvalues;
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
NOTE: SAS sort was used.
NOTE: The data set WORK.CSS_PVALUES has 6 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_c_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   merge css_c_stats css_pvalues (keep=chgtypen avisitn trtpn pval);
MPRINT(BOXPLOT_EACH_PARAM_TP):   by chgtypen avisitn trtpn;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 6 observations read from the data set WORK.CSS_C_STATS.
NOTE: There were 6 observations read from the data set WORK.CSS_PVALUES.
NOTE: The data set WORK.CSS_C_STATS has 6 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete TEMP;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):  ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   data css_plot;
MPRINT(BOXPLOT_EACH_PARAM_TP):   set css_nexttimept css_stats css_c_stats;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format mean 5.1 std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   format c_mean 5.1 c_std 6.2;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: There were 990 observations read from the data set WORK.CSS_NEXTTIMEPT.
NOTE: There were 12 observations read from the data set WORK.CSS_STATS.
NOTE: There were 6 observations read from the data set WORK.CSS_C_STATS.
NOTE: The data set WORK.CSS_PLOT has 1008 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Graphics Adjustments - Set defaults for all graphs, MISSING=' ' since most P-VALUEs are
missing ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   options orientation=landscape missing=' ';
MPRINT(BOXPLOT_EACH_PARAM_TP):   goptions reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics on / reset=all;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods graphics / border=no attrpriority=COLOR;
MPRINT(BOXPLOT_EACH_PARAM_TP):   title1 justify=left height=1.2 "Box Plot - Diastolic Blood Pressure (mmHg) Last/Min/Max
Baseline versus Last/Min/Max Post-baseline by Treatment";
MPRINT(BOXPLOT_EACH_PARAM_TP):   title2 justify=left height=1.2 "Analysis Timepoint: AFTER STANDING FOR 3 MINUTES";
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote1 justify=left height=1.0 'Box plot type is schematic: the box shows median and
interquartile range (IQR, the box height); the whiskers extend to the minimum and maximum data points';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote2 justify=left height=1.0 'within 1.5 IQR of the lower and upper quartiles,
respectively. Values outside the whiskers are shown as outliers. Means are marked with a different symbol for each treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   footnote3 justify=left height=1.0 'Red dots indicate measures outside the normal reference
range. P-value is for the treatment comparison from ANCOVA model Change = Baseline + Treatment.';
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- ODS PDF destination (Traditional Graphics, No ODS or Listing output) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing close;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf
file="C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_817.pdf" notoc
bookmarklist=none columns=2 dpi=300 startpage=no author="(ditommd1) PhUSE CS Standard Analysis Library" subject='PhUSE CS
Measures of Central Tendency' title="Boxplot of Diastolic Blood Pressure (mmHg) Last/Min/Max Baseline versus Last/Min/Max
Post-baseline by Treatment for Analysis Timepoint AFTER STANDING FOR 3 MINUTES" ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_817.pdf",
      printer "PDF".
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- OBSERVED values (left plot) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( 1<=chgtypen<=3 )) template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _TITLE = 'Observed Values' _MARKERS = "trtp_short" _XVAR = 'chgtypevisitn' _BLOCKLABEL
= 'chgtype' _YVAR = "aval" _YOUTLIERS = 'm_var_outlier' _REFLINES = "60,90" _YLABEL = "Diastolic Blood Pressure (mmHg)" _YMIN =
40 _YMAX = 120 _YINCR = 8 _N = 'n' _MEAN = 'mean' _STD = 'std' _DATAMIN = 'datamin' _Q1 = 'q1' _MEDIAN = 'median' _Q3 = 'q3'
_DATAMAX = 'datamax' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: Multiple concurrent threads will be used to summarize data.
NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 1008 observations read from the data set WORK.CSS_PLOT.
      WHERE (chgtypen>=1 and chgtypen<=3);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           17.13 seconds
      cpu time            2.18 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- CHANGE values (right plot) DO NOT DISPLAY baseline visit (always zero change) ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   proc sgrender data=css_plot (where=( avisit = 'POST' AND 1<=chgtypen<=3 ))
template=PhUSEboxplot ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   dynamic _TITLE = 'Change from Baseline' _MARKERS = "trtp_short" _XVAR = 'chgtypevisitn'
_BLOCKLABEL = 'chgtype' _YVAR = "chg" _REFLINES = "0" _YLABEL = "Change in Diastolic Blood Pressure (mmHg)" _YMIN = -42 _YMAX =
28 _YINCR = 7 _N = 'c_n' _MEAN = 'c_mean' _STD = 'c_std' _DATAMIN = 'c_datamin' _Q1 = 'c_q1' _MEDIAN = 'c_median' _Q3 = 'c_q3'
_DATAMAX = 'c_datamax' _PVAL = 'pval' ;
MPRINT(BOXPLOT_EACH_PARAM_TP):   run;

NOTE: The graph will be rendered as an image due to the use of data skins.
NOTE: There were 507 observations read from the data set WORK.CSS_PLOT.
      WHERE (avisit='POST') and (chgtypen>=1 and chgtypen<=3);
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           7.86 seconds
      cpu time            1.52 seconds


MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Release the PDF output file! ---*;
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods pdf close;
NOTE: ODS PDF printed 1 page to
      C:\CSS\phuse-scripts\whitepapers\WPCT\outputs_sas\WPCT-F.07.08_Box_plot_DIABP_lastminmax_change_timepoint_817.pdf.
MPRINT(BOXPLOT_EACH_PARAM_TP):   ods listing;
MPRINT(BOXPLOT_EACH_PARAM_TP):   *--- Clean up temp data sets required to create box plots ---*;
MPRINT(UTIL_DELETE_DSETS):   proc datasets library=WORK memtype=DATA nolist nodetails;
MPRINT(UTIL_DELETE_DSETS):   delete CSS_NEXTPARAM CSS_NEXTTIMEPT CSS_PVALUES CSS_STATS CSS_C_STATS CSS_PLOT;
MPRINT(UTIL_DELETE_DSETS):   quit;

NOTE: Deleting WORK.CSS_NEXTPARAM (memtype=DATA).
NOTE: Deleting WORK.CSS_NEXTTIMEPT (memtype=DATA).
NOTE: Deleting WORK.CSS_PVALUES (memtype=DATA).
NOTE: Deleting WORK.CSS_STATS (memtype=DATA).
NOTE: Deleting WORK.CSS_C_STATS (memtype=DATA).
NOTE: Deleting WORK.CSS_PLOT (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds


460
461    /*** END boxplotting ***/

